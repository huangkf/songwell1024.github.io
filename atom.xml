<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记路心晴</title>
  
  <subtitle>心晴路放</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-30T01:54:29.696Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>WilsonSong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LinearRegression</title>
    <link href="http://yoursite.com/2018/07/30/LinearRegression/"/>
    <id>http://yoursite.com/2018/07/30/LinearRegression/</id>
    <published>2018-07-30T01:42:31.000Z</published>
    <updated>2018-07-30T01:54:29.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>线性回归(Linear Regression)是利用称为线性回归方程的最小平方函数对一个或多个自变量和因变量之间关系进行建模的一种回归分析。这种函数是一个或多个称为回归系数的模型参数的线性组合。</p><p>回归分析中，只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。<br>        其特点为：</p><ul><li><p>解决回归问题</p></li><li><p>思想简单，实现容易</p></li><li><p>许多强大的非线性模型的基础</p></li><li><p>结果具有很好的可解释性</p></li><li><p>蕴含机器学习中的很多重要思想</p></li></ul><h2 id="简单线性回归的实现"><a href="#简单线性回归的实现" class="headerlink" title="简单线性回归的实现"></a>简单线性回归的实现</h2><p>  下面我们来举例何为一元线性回归分析:<br>      首先假设有这样一组数据<br>  <img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/LinearRegression%2FLinear1.png" alt="dataset"><br>      从数据中我们可以看出，可以找到一条直线实现数据的拟合，这条直线设为<br>                                  y=ax+b<br>      那怎么计算a和b的参数，公式如下:<br>  <img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/LinearRegression%2FLinear2.png" alt="ab"></p><p>  jupyter notebook中具体的代码实现：</p><pre><code>x_mean = np.mean(x)y_mean = np.mean(y)# 分子num = 0.0# 分母d = 0.0for x_i, y_i in zip(x, y):num += (x_i - x_mean) * (y_i - y_mean)d += (x_i - x_mean) ** 2a = num/db = y_mean - a*x_meany_hat = a*x + bplt.scatter(x,y)plt.plot(x,y_hat,color=&quot;r&quot;)plt.axis([0,6,0,6])plt.show()</code></pre><p>得到了拟合数据的直线：<br><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/LinearRegression%2FLinear3.png" alt="拟合直线"></p><p>这里还可以在底层自己实现线性回归的算法，然后在jupyter notebook中调用，相应的pycharm的代码为：</p><pre><code>import numpy as npfrom sklearn.metrics import r2_scoreclass LinearRegression:def __init__(self):&quot;&quot;&quot;初始化Linear Regression模型&quot;&quot;&quot;self.coef_ = Noneself.intercept_ = Noneself._theta = Nonedef fit_normal(self, X_train, y_train):&quot;&quot;&quot;根据训练数据集X_train, y_train训练Linear Regression模型&quot;&quot;&quot;assert X_train.shape[0] == y_train.shape[0], \&quot;the size of X_train must be equal to the size of y_train&quot;X_b = np.hstack([np.ones((len(X_train), 1)), X_train])self._theta = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y_train)self.intercept_ = self._theta[0]self.coef_ = self._theta[1:]return selfdef fit_gd(self, X_train, y_train, eta=0.01, n_iters=1e4):&quot;&quot;&quot;根据训练数据集X_train, y_train, 使用梯度下降法训练Linear Regression模型&quot;&quot;&quot;assert X_train.shape[0] == y_train.shape[0], \&quot;the size of X_train must be equal to the size of y_train&quot;def J(theta, X_b, y):try:return np.sum((y - X_b.dot(theta)) ** 2) / len(y)except:return float(&apos;inf&apos;)def dJ(theta, X_b, y):# res = np.empty(len(theta))# res[0] = np.sum(X_b.dot(theta) - y)# for i in range(1, len(theta)):# res[i] = (X_b.dot(theta) - y).dot(X_b[:, i])# return res * 2 / len(X_b)return X_b.T.dot(X_b.dot(theta) - y) * 2. / len(X_b)def gradient_descent(X_b, y, initial_theta, eta, n_iters=1e4, epsilon=1e-8):theta = initial_thetacur_iter = 0while cur_iter &lt; n_iters:gradient = dJ(theta, X_b, y)last_theta = thetatheta = theta - eta * gradientif (abs(J(theta, X_b, y) - J(last_theta, X_b, y)) &lt; epsilon):breakcur_iter += 1return thetaX_b = np.hstack([np.ones((len(X_train), 1)), X_train])initial_theta = np.zeros(X_b.shape[1])self._theta = gradient_descent(X_b, y_train, initial_theta, eta, n_iters)self.intercept_ = self._theta[0]self.coef_ = self._theta[1:]return selfdef fit_sgd(self, X_train, y_train, n_iters=5, t0=5, t1=50):&quot;&quot;&quot;根据训练数据集X_train, y_train, 使用梯度下降法训练Linear Regression模型&quot;&quot;&quot;assert X_train.shape[0] == y_train.shape[0], \&quot;the size of X_train must be equal to the size of y_train&quot;assert n_iters &gt;= 1def dJ_sgd(theta, X_b_i, y_i):return X_b_i * (X_b_i.dot(theta) - y_i) * 2.def sgd(X_b, y, initial_theta, n_iters, t0=5, t1=50):def learning_rate(t):return t0 / (t + t1)theta = initial_thetam = len(X_b)for cur_iter in range(n_iters):indexes = np.random.permutation(m)X_b_new = X_b[indexes]y_new = y[indexes]for i in range(m):gradient = dJ_sgd(theta, X_b_new[i], y_new[i])theta = theta - learning_rate(cur_iter * m + i) * gradientreturn thetaX_b = np.hstack([np.ones((len(X_train), 1)), X_train])initial_theta = np.random.randn(X_b.shape[1])self._theta = sgd(X_b, y_train, initial_theta, n_iters, t0, t1)self.intercept_ = self._theta[0]self.coef_ = self._theta[1:]return selfdef predict(self, X_predict):&quot;&quot;&quot;给定待预测数据集X_predict，返回表示X_predict的结果向量&quot;&quot;&quot;assert self.intercept_ is not None and self.coef_ is not None, \&quot;must fit before predict!&quot;assert X_predict.shape[1] == len(self.coef_), \&quot;the feature number of X_predict must be equal to X_train&quot;X_b = np.hstack([np.ones((len(X_predict), 1)), X_predict])return X_b.dot(self._theta)def score(self, X_test, y_test):&quot;&quot;&quot;根据测试数据集 X_test 和 y_test 确定当前模型的准确度&quot;&quot;&quot;y_predict = self.predict(X_test)return r2_score(y_test, y_predict)def __repr__(self):return &quot;LinearRegression()&quot;</code></pre><p>​<br>这里其实就是一个简单的一元数据的一个简答线性回归算法。</p><h2 id="线性回归评价指标"><a href="#线性回归评价指标" class="headerlink" title="线性回归评价指标"></a>线性回归评价指标</h2><p>那怎么去评价线性回归算法的指标的好坏呢？<br>    常用得三个指标：均方误差MSE、均方根误差RMSE、平均绝对误差MAE，这三类算法具体公式这些就不再赘述了，这三类指标都存在一个局限性：作用域的使用范围，对不同事物的预测缺乏统一标准，这样就引出了新的一个预测指标R Squared，其实就是R^2,关于R^2的解释如下：<br><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/LinearRegression%2FLinear4.png" alt="R^2"></p><p>从上面的图中我们到关于R^2的公式，公式中上面分子就是我们训练出的模型预测的所有误差。 下面分母就是    不管什么我们猜的结果就是y的平均数。（其实也就是我们瞎猜的误差）<br>    那具体实现下这些评价指标，首先换一个数据集，上面是我们自己构造的的太简单了，<br>    导入sklearn中的datasets</p><pre><code>import numpy as npimport matplotlib.pyplot as pltfrom sklearn import datasetsfrom sklearn.model_selection import train_test_splitfrom sklearn.metrics import mean_squared_error, mean_absolute_errorboston = datasets.load_boston()x = boston.data[:,5]y = boston.targetx = x[y&lt;50.0]y = y[y&lt;50.0]plt.scatter(x, y)plt.show()# 划分训练集和测试集x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2)# 简单线性规划x_mean = np.mean(x_train)y_mean = np.mean(y_train)# 分子num = 0.0# 分母d = 0.0for x_i, y_i in zip(x_train, y_train):num += (x_i - x_mean) * (y_i - y_mean)d += (x_i - x_mean) ** 2a = num/db = y_mean - a*x_meany_hat = a*x_train + b # 回归函数plt.scatter(x_train, y_train)plt.plot(x_train, y_hat, color=&quot;r&quot;)plt.show()</code></pre><p>​<br>    y_predict = a*x_test + b<br>    mse = mean_squared_error(y_test, y_predict)<br>    mae = mean_absolute_error(y_test, y_predict)<br>    print(“均方误差为：” + str(mse))<br>    print(“平均绝对误差为：” + str(mae))</p><pre><code>rs = 1 - mse/np.var(y_test)print(&quot;R Square = &quot; + str(rs))</code></pre><p><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/LinearRegression%2FLinear5.png" alt="data"></p><p>这样我们就得到了所有的评价指标。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线性回归&quot;&gt;&lt;a href=&quot;#线性回归&quot; class=&quot;headerlink&quot; title=&quot;线性回归&quot;&gt;&lt;/a&gt;线性回归&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h
      
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习，线性回归" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%8C%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>机器学习之梯度下降法(GradientDescent)</title>
    <link href="http://yoursite.com/2018/07/29/GradientDescent/"/>
    <id>http://yoursite.com/2018/07/29/GradientDescent/</id>
    <published>2018-07-29T13:32:24.000Z</published>
    <updated>2018-07-30T01:38:58.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>梯度下降法是迭代法的一种,其实它不是一种具体的机器学习算法，是一种基于搜索的最优化方法，可以用于求解最小二乘问题(线性和非线性都可以)。在求解机器学习算法的模型参数，即无约束优化问题时，梯度下降（Gradient Descent）是最常采用的方法之一，另一种常用的方法是最小二乘法。在求解损失函数的最小值时，可以通过梯度下降法来一步步的迭代求解，得到最小化的损失函数和模型参数值。相应的还有一个梯度上升法，它的作用是最大化一个效用函数。</p><a id="more"></a> <p>​        用一个图来表示梯度下降法：<br><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/Gradient%20Descent%2FGradientDescent1.png" alt=""></p><p>怎么理解呢？梯度其实是在在多维空间中的概念，在二维的平面上其实就是导数，梯度表示的就是方向，通过求某一个点的梯度，我们就可以知道J(损失函数)增大的方向，然后乘-η就可以找到J(损失函数)减小的方向，不断地求J的导数，直到其变为0，这样就找到J的最小值点。这里的η称为学习率，η的取值影响获得最优解的速度，η取值太小的时候学习速度收敛太慢，η太大有可能直接跳过最小值点然后导致不收敛。</p><p><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/Gradient%20Descent%2FGradientDescent2.png" alt=""></p><p>有可能在某一次取值的过程中找到的是局部最优解，而不是全局最优解。这个时候怎么解决呢？多次运行，随机化初始点，这样的话增加了找到全局最优解的概率。</p><h2 id="模拟实现梯度下降法"><a href="#模拟实现梯度下降法" class="headerlink" title="模拟实现梯度下降法"></a>模拟实现梯度下降法</h2><p>jupyter notebook中实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#datasets</span></span><br><span class="line">x = np.linspace(<span class="number">-1</span>, <span class="number">6</span> ,<span class="number">141</span>)</span><br><span class="line">y = (x<span class="number">-2.5</span>)**<span class="number">2</span><span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求导数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dJ</span><span class="params">(theta)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>*(theta - <span class="number">2.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">J</span><span class="params">(theta)</span>:</span></span><br><span class="line"><span class="keyword">return</span> (theta - <span class="number">2.5</span>)**<span class="number">2</span><span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 梯度下降法</span></span><br><span class="line">theta = <span class="number">0.0</span></span><br><span class="line">eta = <span class="number">0.1</span></span><br><span class="line"><span class="comment">#误差精度</span></span><br><span class="line">epsilon = <span class="number">1e-8</span></span><br><span class="line">theta_history = [theta]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">gradient = dJ(theta)</span><br><span class="line">last_theta = theta</span><br><span class="line">theta = theta - eta * gradient</span><br><span class="line">theta_history.append(theta)</span><br><span class="line"><span class="keyword">if</span>(abs(J(theta) - J(last_theta)) &lt; epsilon):</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.plot(np.array(theta_history), J(np.array(theta_history)), color=<span class="string">'R'</span>, marker = <span class="string">'o'</span>)</span><br><span class="line">plt.xlabel(<span class="string">"theta"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"J"</span>)</span><br><span class="line">plt.show()</span><br><span class="line">print(<span class="string">"theta = "</span> + str(theta))</span><br><span class="line">print(<span class="string">"J(theta) = "</span> + str(J(theta)))</span><br></pre></td></tr></table></figure><p>得到的结果如下：<br><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/Gradient%20Descent%2FGradientDescent3.png" alt=""></p><p>然后我们上面讨论过，η取值太小的时候学习速度收敛太慢，η太大有可能直接跳过最小值点然后导致不收敛。下面测试一下。先取η=0.01<br><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/Gradient%20Descent%2FGradientDescent4.png" alt=""></p><p>我们可以看出梯度下降的速度变慢了<br>        然后取η=1<br><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/Gradient%20Descent%2FGradientDescent5.png" alt=""></p><p>当η&gt;1的时候编译器就自动报错，但是这里只是针对这里定义的这个函数，并不是意味着η=1就是极限值，针对不同的函数有不同的取值。</p><h2 id="多元线性回归中使用批量梯度下降"><a href="#多元线性回归中使用批量梯度下降" class="headerlink" title="多元线性回归中使用批量梯度下降"></a>多元线性回归中使用批量梯度下降</h2><p>线性回归中使用梯度下降法，其目标是使得<br>$$<br>\sum_{i=1}^{m}(y^i-\hat{y}^i)^2<br>$$<br>尽可能小，而且线性回归算法的损失函数是具有唯一解的。<br>        其中<br>$$<br>\hat{y}^{i} = \theta _{0} + \theta _{1}X_{1}^{i}+…++ \theta _{n}X_{n}^{i}<br>$$<br>带入因此线性回归中梯度下降的目标就成为了<br>$$<br>\sum_{i=1}^{m}(y^i - \theta _{0} + \theta _{1}X_{1}^{i}+…++ \theta _{n}X_{n}^{i})<br>$$<br>使得其尽可能小。<br>那梯度怎么去求呢？如下：<br><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/Gradient%20Descent%2FGradientDescent6.png" alt=""></p><h3 id="批量梯度下降法具体实现"><a href="#批量梯度下降法具体实现" class="headerlink" title="批量梯度下降法具体实现"></a>批量梯度下降法具体实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">np.random.seed(666)</span><br><span class="line">x = 2 * np.random.random(size = 100)</span><br><span class="line">y = x * 3.0 + 4.0 + np.random.normal(size = 100)</span><br><span class="line">X = x.reshape(-1, 1)</span><br><span class="line"></span><br><span class="line">#损失函数</span><br><span class="line">def J(theta, X_b, y):</span><br><span class="line">try:</span><br><span class="line">return np.sum((y - X_b.dot(theta))**2)/len(X_b)</span><br><span class="line">except:</span><br><span class="line">return float(&apos;inf&apos;)</span><br><span class="line"></span><br><span class="line">#损失函数的梯度</span><br><span class="line">def dJ(theta, X_b, y):</span><br><span class="line">res = np.empty(len(theta))</span><br><span class="line">res[0] = np.sum(X_b.dot(theta) - y)</span><br><span class="line">for i in range(1, len(theta)):</span><br><span class="line">res[i] = (X_b.dot(theta) - y).dot(X_b[:,i])</span><br><span class="line">return res *2 /len(X_b)</span><br><span class="line"></span><br><span class="line">#梯度下降法</span><br><span class="line">def gradient_descent(X_b, y, initial_thata, eta, n_iters = 1e4, epsilon = 1e-8):</span><br><span class="line">theta = initial_theta</span><br><span class="line">i_iter = 0</span><br><span class="line"></span><br><span class="line">while i_iter &lt; n_iters:# n_iters是最大循环次数</span><br><span class="line">gradient = dJ(theta, X_b, y)</span><br><span class="line">last_theta = theta</span><br><span class="line">theta = theta - eta * gradient</span><br><span class="line"></span><br><span class="line">if(abs(J(theta, X_b, y) - J(last_theta, X_b, y)) &lt; epsilon):</span><br><span class="line">break</span><br><span class="line"></span><br><span class="line">i_iter += 1</span><br><span class="line"></span><br><span class="line">return theta</span><br><span class="line"></span><br><span class="line">X_b = np.hstack([np.ones((len(x), 1)), x.reshape(-1, 1)])</span><br><span class="line">initial_theta = np.zeros(X_b.shape[1])</span><br><span class="line">eta = 0.01</span><br><span class="line"></span><br><span class="line">theta = gradient_descent(X_b, y, initial_theta, eta)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(x, y)</span><br><span class="line">Y = X_b.dot(theta)</span><br><span class="line">plt.plot(x, Y, color=<span class="string">"red"</span>)</span><br><span class="line">plt.show()</span><br><span class="line">print(<span class="string">"theta = "</span> + str(theta))</span><br></pre></td></tr></table></figure><p>得到的结果</p><p><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/Gradient%20Descent%2FGradientDescent7.png" alt=""></p><p>在初始化数据的时候，斜率设为3，截距为4，然后我们训练出的结果theta与两值接近，证明训练的模型是准确的：<br>y = x * 3.0 + 4.0 + np.random.normal(size = 100)</p><h2 id="随机梯度下降法"><a href="#随机梯度下降法" class="headerlink" title="随机梯度下降法"></a>随机梯度下降法</h2><p>上面我们用的是批量梯度下降法，这种方法有一个缺点，就是每一项都需要对所有的样本点进行计算，数据量少的时候还可以，但是数据量很大的时候就显得很鸡肋了，计算非常的耗资源。能不能每一次计算的时候只对其中的一个样本进行计算呢？这就衍生出了随机梯度下降法。</p><p><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/Gradient%20Descent%2FGradientDescent8.png" alt=""></p><p>即每读取一条样本，就迭代对Θ进行更新，然后判断其是否收敛，若没收敛，则继续读取样本进行处理，如果所有样本都读取完毕了，则循环重新从头开始读取样本进行处理。但是，相较于批量梯度下降算法而言，随机梯度下降算法使得J(Θ)趋近于最小值的速度更快，但是有可能造成永远不可能收敛于最小值，有可能一直会在最小值周围震荡，但是实践中，大部分值都能够接近于最小值，所以当数据量很大的时候可以用精度来换取时间。</p><p>在随机梯度下降法中为了得到更高的收敛结果，学习率是要随着循环次数的增加而逐渐的减小。这是因为在学习的过程中要是学习率是一个固定值，但是可能由于随机的过程不够好，eta有是一个固定值，那么在学习的过程中随机梯度下降法接近最优解的时候又会慢慢的跳出最优解的范围。气质学习率随着循环次数的增加而逐渐的减小这种思想是模拟退火的思想，去搜了下模拟退火，下面写下自己的理解。</p><h3 id="模拟退火算法"><a href="#模拟退火算法" class="headerlink" title="模拟退火算法"></a>模拟退火算法</h3><p>拟退火其实也是一种贪心算法，但是它的搜索过程引入了随机因素。模拟退火算法以一定的概率来接受一个比当前解要差的解，因此有可能会跳出这个局部的最优解，达到全局的最优解。<br>模拟退火算法描述：</p><p>想象一个高温物体的降温过程。其温度为T时出现能量差为dE的降温概率为<br>P(dE) =  e ^ ( -dE / (k * T) ) 。<br>其实就是温度越高降温的概率越大，温度越低降温概率越小。而模拟退火就是利用这样一种思想去进行搜索。<br>那么在进行搜索的时候首先定义一个初始值( 温度 ) T , 一个系数 r ( 降温速度  0 \&lt; r \&lt; 1 ) , 假设你当前状态为 f i , 你的下一个状态为 f i +1 , 对这两个状态进行评价，如果更接近你想要的结果，就更新到这个状态，否则则以 P ( dE ) 的概率去更新到 这个状态，但是其实在实际题目中，这个概率是不必要的，这一步有时是可以忽略掉的。我们可以想象，随着搜索次数的不断增多，搜索范围将越来越趋近于稳定，也就是随着时间的增长温度降低的概率越来越低，直到趋近于1。对应搜索就是随着你搜索的次数越多，你搜索到的值是你想要的值的概率就越大。</p><p>然后结合模拟退火的思想，在随机梯度下降法中设置学习率为:</p><p>然后结合模拟退火的思想，在随机梯度下降法中设置学习率为:<br>$$<br>\eta = \frac{a}{i_iters + b}<br>$$<br>其中i_iters是循环次数，a,b是两个经验参数，根据实际情况设置。</p><p>看完了梯度下降法，其优缺点如下：</p><p>第一种，遍历全部数据集算一次损失函数，然后算函数对各个参数的梯度，更新梯度。这种方法每更新一次参数都要把数据集里的所有样本都看一遍，计算量开销大，计算速度慢，不支持在线学习，其实这就是批量梯度下降。</p><p>其中i_iters是循环次数，a,b是两个经验参数，根据实际情况设置。</p><p>看完了梯度下降法，其优缺点如下：</p><p>第一种，遍历全部数据集算一次损失函数，然后算函数对各个参数的梯度，更新梯度。这种方法每更新一次参数都要把数据集里的所有样本都看一遍，计算量开销大，计算速度慢，不支持在线学习，其实这就是批量梯度下降。</p><p>其中i_iters是循环次数，a,b是两个经验参数，根据实际情况设置。<br>看完了梯度下降法，其优缺点如下：<br>第一种，遍历全部数据集算一次损失函数，然后算函数对各个参数的梯度，更新梯度。这种方法每更新一次参数都要把数据集里的所有样本都看一遍，计算量开销大，计算速度慢，不支持在线学习，其实这就是批量梯度下降。</p><p>另一种，每看一个数据就算一下损失函数，然后求梯度更新参数，这个其实也就是随机梯度下降，这个方法速度比较快，但是收敛性能不太好，可能在最优点附近晃来晃去，找不到不到最优点。两次参数的更新也有可能互相抵消掉，造成目标函数震荡的比较剧烈。</p><p>为了克服两种方法的缺点，现在一般采用的是一种折中手段，小批的梯度下降，这种方法把数据分为若干个批，按批来更新参数，这样，一个批中的一组数据共同决定了本次梯度的方向，下降起来就不容易跑偏，减少了随机性。另一方面因为批的样本数与整个数据集相比小了很多，计算量也不是很大。</p><p>另一种，每看一个数据就算一下损失函数，然后求梯度更新参数，这个其实也就是随机梯度下降，这个方法速度比较快，但是收敛性能不太好，可能在最优点附近晃来晃去，找不到不到最优点。两次参数的更新也有可能互相抵消掉，造成目标函数震荡的比较剧烈。为了克服两种方法的缺点，现在一般采用的是一种折中手段，小批的梯度下降，这种方法把数据分为若干个批，按批来更新参数，这样，一个批中的一组数据共同决定了本次梯度的方向，下降起来就不容易跑偏，减少了随机性。另一方面因为批的样本数与整个数据集相比小了很多，计算量也不是很大。</p><p>为了克服两种方法的缺点，现在一般采用的是一种折中手段，小批的梯度下降，这种方法把数据分为若干个批，按批来更新参数，这样，一个批中的一组数据共同决定了本次梯度的方向，下降起来就不容易跑偏，减少了随机性。另一方面因为批的样本数与整个数据集相比小了很多，计算量也不是很大。</p><h3 id="随机梯度下降法实现"><a href="#随机梯度下降法实现" class="headerlink" title="随机梯度下降法实现"></a>随机梯度下降法实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">m = 100000</span><br><span class="line">x = np.random.normal(size = m)</span><br><span class="line">X = x.reshape(-1, 1)</span><br><span class="line">y = 4.0 * x + 3.0 + np.random.normal(0 ,3, size = m)</span><br><span class="line"></span><br><span class="line">def J(theta, X_b, y):</span><br><span class="line">try:</span><br><span class="line">return np.sum((y - X_b.dot(theta))**2) / len(y)</span><br><span class="line">except:</span><br><span class="line">return float(&apos;inf&apos;)</span><br><span class="line"></span><br><span class="line">def dJ_sgd(theta, X_b_i, y_i):</span><br><span class="line">return X_b_i.T.dot(X_b_i.dot(theta) - y_i) * 2.0 </span><br><span class="line"></span><br><span class="line">def sgd(X_b, y, initial_theta, n_iters):</span><br><span class="line">t0 = 5</span><br><span class="line">t1 = 50</span><br><span class="line"></span><br><span class="line">def learning_rate(t):</span><br><span class="line">return t0 / (t + t1)</span><br><span class="line"></span><br><span class="line">theta = initial_theta</span><br><span class="line">for cur_iter in range(n_iters):</span><br><span class="line">rand_i = np.random.randint(len(X_b))</span><br><span class="line">gradient = dJ_sgd(theta, X_b[rand_i], y[rand_i])</span><br><span class="line">theta = theta - learning_rate(cur_iter) * gradient</span><br><span class="line"></span><br><span class="line">return theta</span><br><span class="line">X_b = np.hstack([np.ones((len(X), 1)), X])</span><br><span class="line">initial_theta = np.zeros(X_b.shape[1])</span><br><span class="line">theta = sgd(X_b, y, initial_theta, n_iters = len(X_b)//3)</span><br><span class="line">print(&quot;theta = &quot; + str(theta))</span><br></pre></td></tr></table></figure><p>输出的theta = [3.00887864 4.05589554]，与设置的数据相接近。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;梯度下降法&quot;&gt;&lt;a href=&quot;#梯度下降法&quot; class=&quot;headerlink&quot; title=&quot;梯度下降法&quot;&gt;&lt;/a&gt;梯度下降法&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;梯度下降法是迭代法的一种,其实它不是一种具体的机器学习算法，是一种基于搜索的最优化方法，可以用于求解最小二乘问题(线性和非线性都可以)。在求解机器学习算法的模型参数，即无约束优化问题时，梯度下降（Gradient Descent）是最常采用的方法之一，另一种常用的方法是最小二乘法。在求解损失函数的最小值时，可以通过梯度下降法来一步步的迭代求解，得到最小化的损失函数和模型参数值。相应的还有一个梯度上升法，它的作用是最大化一个效用函数。&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习，梯度下降，python3，jupyter notebook" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%8C%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%EF%BC%8Cpython3%EF%BC%8Cjupyter-notebook/"/>
    
  </entry>
  
  <entry>
    <title>哈哈哈，终于把博客搭建起来啦</title>
    <link href="http://yoursite.com/2018/06/21/first-blog/"/>
    <id>http://yoursite.com/2018/06/21/first-blog/</id>
    <published>2018-06-21T13:00:00.000Z</published>
    <updated>2018-06-21T13:18:15.120Z</updated>
    
    <content type="html"><![CDATA[<p>  用来几个小时的时间，算是完成了简单的搭建，果然在学习的过程中才是最开心的。为什么要跑到这里搭建博客呢？嗯。。。。<br>  毕竟是要常年混迹在全球最大的同性交友社区了，把博客搭起来写写项目开发经历，记录下自己开踩过的坑，还是很重要的。<br>  希望路能越走越顺吧。啦啦啦……..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  用来几个小时的时间，算是完成了简单的搭建，果然在学习的过程中才是最开心的。为什么要跑到这里搭建博客呢？嗯。。。。&lt;br&gt;  毕竟是要常年混迹在全球最大的同性交友社区了，把博客搭起来写写项目开发经历，记录下自己开踩过的坑，还是很重要的。&lt;br&gt;  希望路能越走越顺吧。啦啦
      
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
