<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记路心晴</title>
  
  <subtitle>心晴路放</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-09T02:41:59.805Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>WilsonSong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot学习之秒杀接口优化</title>
    <link href="http://yoursite.com/2018/08/08/APIIOptimise/"/>
    <id>http://yoursite.com/2018/08/08/APIIOptimise/</id>
    <published>2018-08-08T12:13:48.000Z</published>
    <updated>2018-08-09T02:41:59.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用RabbitMQ改写秒杀功能"><a href="#使用RabbitMQ改写秒杀功能" class="headerlink" title="使用RabbitMQ改写秒杀功能"></a>使用RabbitMQ改写秒杀功能</h1><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>思路：减少数据库访问 </p><a id="more"></a><p>具体的实现流程就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.系统初始化，把商品库存数量加载到Redis</span><br><span class="line"></span><br><span class="line">2.收到请求，Redis预减库存，库存不足，直接返回，否则3</span><br><span class="line"></span><br><span class="line">3.请求入队，立即返回排队中</span><br><span class="line"></span><br><span class="line">4.请求出队，生成订单，减少库存</span><br><span class="line"></span><br><span class="line">5.客户端轮询，是否秒杀成功</span><br></pre></td></tr></table></figure><p>其中4和5是同时并发处理的。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h4 id="系统初始化，把商品库存数量加载到Redis"><a href="#系统初始化，把商品库存数量加载到Redis" class="headerlink" title="系统初始化，把商品库存数量加载到Redis"></a><strong>系统初始化，把商品库存数量加载到Redis</strong></h4><p>如何在初始化的时候就将库存数据存入缓存中</p><p>通过实现InitializingBean接口中的一个方法:afterPropertiesSet()</p><p>系统初始化会首先调用该函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 系统初始化会调用该函数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       List&lt;GoodsVo&gt; goodsVoList = goodsService.listGoodsVo();</span><br><span class="line">       <span class="keyword">if</span> (goodsVoList == <span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (GoodsVo goodsVo:goodsVoList)&#123;</span><br><span class="line">           <span class="comment">//预先把商品库存加载到redis中</span></span><br><span class="line">           redisService.set(GoodsKey.getSeckillGoodsStock,<span class="string">""</span>+goodsVo.getId(),goodsVo.getStockCount());</span><br><span class="line">           localOverMap.put(goodsVo.getId(),<span class="keyword">false</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="收到请求，Redis预减库存，库存不足，直接返回，否则请求入队，立即返回排队中"><a href="#收到请求，Redis预减库存，库存不足，直接返回，否则请求入队，立即返回排队中" class="headerlink" title="收到请求，Redis预减库存，库存不足，直接返回，否则请求入队，立即返回排队中"></a>收到请求，Redis预减库存，库存不足，直接返回，否则请求入队，立即返回排队中</h4><p>首先需要一个RabbitMQ的队列</p><p>使用Direct交换机模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Direct 交换机模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">secKill_QUEUE</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(SECKILL_QUEUE,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>队列消息的发送</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void sendSecKillMessage(SecKillMessage secKillMessage) &#123;</span><br><span class="line">       String msg = RedisService.Bean2String(secKillMessage);</span><br><span class="line">       logger.info(&quot;send SecKill message: &quot; + msg);</span><br><span class="line">       amqpTemplate.convertAndSend(MQConfig.SECKILL_QUEUE, msg);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>秒杀的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//预先减库存</span></span><br><span class="line"><span class="keyword">long</span> stock = redisService.decr(GoodsKey.getSeckillGoodsStock,<span class="string">""</span>+goodsId);</span><br><span class="line"><span class="keyword">if</span> (stock &lt; <span class="number">0</span>)&#123;</span><br><span class="line">localOverMap.put(goodsId,<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span> Result.error(CodeMsg.SECKILL_OVER);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否已经秒杀到了</span></span><br><span class="line">SecKillOrder order = orderService.getOrderByUserIdGoodsId(user.getId(),goodsId);</span><br><span class="line"><span class="keyword">if</span> (order != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> Result.error( CodeMsg.SECKILL_REPEATE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//压入RabbitMQ队列</span></span><br><span class="line">SecKillMessage secKillMessage = <span class="keyword">new</span> SecKillMessage();</span><br><span class="line">secKillMessage.setUser(user);</span><br><span class="line">secKillMessage.setGoodsId(goodsId);</span><br><span class="line">mqSender.sendSecKillMessage(secKillMessage);</span><br><span class="line"><span class="keyword">return</span> Result.success(<span class="number">0</span>);    <span class="comment">//排队中</span></span><br></pre></td></tr></table></figure><h4 id="请求出队，生成订单，减少库存"><a href="#请求出队，生成订单，减少库存" class="headerlink" title="请求出队，生成订单，减少库存"></a>请求出队，生成订单，减少库存</h4><p>其实就是RabbitMQ的队列出队去处理相关的业务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener</span>(queues = MQConfig.SECKILL_QUEUE)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">       logger.info(<span class="string">"receive message"</span> + message);</span><br><span class="line">       SecKillMessage secKillMessage = RedisService.String2Bean(message,SecKillMessage.class);</span><br><span class="line">       SecKillUser user = secKillMessage.getUser();</span><br><span class="line">       <span class="keyword">long</span> goodsId = secKillMessage.getGoodsId();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//判断库存</span></span><br><span class="line">       GoodsVo goods = goodsService.getGoodsVoByGoodsId(goodsId);</span><br><span class="line">       <span class="keyword">int</span> stock = goods.getStockCount();</span><br><span class="line">       <span class="keyword">if</span> (stock &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//判断是否已经秒杀到了</span></span><br><span class="line">       SecKillOrder order = orderService.getOrderByUserIdGoodsId(user.getId(),goodsId);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (order != <span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//减库存 下订单 写入秒杀订单</span></span><br><span class="line">       <span class="comment">//订单的详细信息</span></span><br><span class="line">       OrderInfo orderInfo = secKillService.secKill(user, goods);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="客户端轮询，是否秒杀成功"><a href="#客户端轮询，是否秒杀成功" class="headerlink" title="客户端轮询，是否秒杀成功"></a>客户端轮询，是否秒杀成功</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//秒杀的结果</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * orderId:秒杀成功</span></span><br><span class="line"><span class="comment">     * -1： 秒杀失败</span></span><br><span class="line"><span class="comment">     * 0：排队中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/result"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result&lt;Long&gt; <span class="title">miaoshaResult</span><span class="params">(Model model, SecKillUser user, @RequestParam(<span class="string">"goodsId"</span>)</span> <span class="keyword">long</span> goodsId)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> result = secKillService.getSecKillResult(user.getId(),goodsId);</span><br><span class="line">        <span class="keyword">return</span> Result.success(result);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>secKillService.getSecKillResult():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取结果</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * orderId :成功</span></span><br><span class="line"><span class="comment">     * -1:失败</span></span><br><span class="line"><span class="comment">     * 0： 排队中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">long</span> <span class="title">getSecKillResult</span><span class="params">(Long userId, <span class="keyword">long</span> goodsId)</span> </span>&#123;</span><br><span class="line">        SecKillOrder order = orderService.getOrderByUserIdGoodsId(userId,goodsId);</span><br><span class="line">        <span class="keyword">if</span> (order != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> order.getOrderId();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> isOver = getGoodsOver(goodsId);</span><br><span class="line">            <span class="keyword">if</span> (isOver)&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里涉及到了redis的访问，就是redis中有商品的数量，通过该参数判断卖没卖完，当一次性来了多于商品数目的请求的时候，redis预减库存，减为负数，其实在这个时候在来商品购买请求的时候就不需要在访问redis了。因为商品已经卖完了，这个时候就做一个标记，先判断内存这个标记，如果库存已经小于0了，就不再访问redis，这样就减少了redis的访问次数。</p><p>没有订单有两种情况，卖完了失败，和排队中,</p><p>在上面的秒杀那做个标记。这个商品是否秒杀完了。存入redis中。 </p><p>之后去判断是否存在这个key就知道是哪种情况,这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//事务，原子性操作</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OrderInfo <span class="title">secKill</span><span class="params">(SecKillUser user, GoodsVo goods)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//减库存 下订单 写入秒杀订单 必须是同时完成的</span></span><br><span class="line">        <span class="keyword">boolean</span> success = goodsService.reduceStock(goods);</span><br><span class="line">        <span class="comment">//减库存成功了才进行下订单</span></span><br><span class="line">        <span class="keyword">if</span> (success) &#123;</span><br><span class="line">            <span class="keyword">return</span> orderService.createOrder(user, goods);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; <span class="comment">//说明商品秒杀完了。做一个标记</span></span><br><span class="line">            setGoodsOver(goods.getId());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取结果</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * orderId :成功</span></span><br><span class="line"><span class="comment">     * -1:失败</span></span><br><span class="line"><span class="comment">     * 0： 排队中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">long</span> <span class="title">getSecKillResult</span><span class="params">(Long userId, <span class="keyword">long</span> goodsId)</span> </span>&#123;</span><br><span class="line">        SecKillOrder order = orderService.getOrderByUserIdGoodsId(userId,goodsId);</span><br><span class="line">        <span class="keyword">if</span> (order != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> order.getOrderId();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> isOver = getGoodsOver(goodsId);</span><br><span class="line">            <span class="keyword">if</span> (isOver)&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGoodsOver</span><span class="params">(Long goodsId)</span> </span>&#123;</span><br><span class="line">        redisService.set(SecKillKey.isGoodsOver,<span class="string">""</span>+goodsId,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getGoodsOver</span><span class="params">(Long goodsId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisService.exists(SecKillKey.isGoodsOver,<span class="string">""</span>+goodsId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相对应的前端的修改</p><p>原来的detail页面中秒杀事件函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doMiaosha</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:<span class="string">"/miaosha/do_miaosha"</span>,</span><br><span class="line">        type:<span class="string">"POST"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            goodsId:$(<span class="string">"#goodsId"</span>).val(),</span><br><span class="line">        &#125;,</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.code == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">window</span>.location.href=<span class="string">"/order_detail.htm?orderId="</span>+data.data.id;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                layer.msg(data.msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            layer.msg(<span class="string">"客户端请求有误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>秒杀到商品就直接返回，现在后端改为消息队列，所以需要增加函数进行判断，必要时需要轮询：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(data.code == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href=<span class="string">"/order_detail.htm?orderId="</span>+data.data.id;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    layer.msg(data.msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以将其改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其他的部分省略</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span>(data.code == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">//window.location.href="/order_detail.htm?orderId="+data.data.id;</span></span><br><span class="line">    <span class="comment">//秒杀到商品的时候，这个时候不是直接返回成功，后端是进入消息队列，所以前端是轮询结果，显示排队中</span></span><br><span class="line">    getMiaoshaResult($(<span class="string">"#goodsId"</span>).val());</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    layer.msg(data.msg);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMiaoshaResult</span>(<span class="params">goodsId</span>) </span>&#123;</span><br><span class="line">    g_showLoading();</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url:<span class="string">"/miaosha/result"</span>,</span><br><span class="line">        type:<span class="string">"GET"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            goodsId:$(<span class="string">"#goodsId"</span>).val(),</span><br><span class="line">        &#125;,</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(data.code == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> result = data.data;</span><br><span class="line">                <span class="comment">//失败---    -1</span></span><br><span class="line">                <span class="keyword">if</span>(result &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    layer.msg(<span class="string">"对不起，秒杀失败！"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//排队等待，轮询---   0</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(result == <span class="number">0</span>)&#123;<span class="comment">//继续轮询</span></span><br><span class="line">                    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                        getMiaoshaResult(goodsId);</span><br><span class="line">                    &#125;,<span class="number">50</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//成功----   1</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    layer.msg(<span class="string">"恭喜你，秒杀成功，查看订单?"</span>,&#123;<span class="attr">btn</span>:[<span class="string">"确定"</span>,<span class="string">"取消"</span>]&#125;,</span><br><span class="line">                        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                            <span class="built_in">window</span>.location.href=<span class="string">"/order_detail.htm?orderId="</span>+result;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                            layer.closeAll();</span><br><span class="line">                        &#125;</span><br><span class="line">                    );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                layer.msg(data.msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            layer.msg(<span class="string">"客户端请求有误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="压测"><a href="#压测" class="headerlink" title="压测"></a>压测</h3><p>测试环境 1g + 4核 + 50000个请求</p><p><img src="/2018/08/08/APIIOptimise/1533781770583.png" alt="1533781770583"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用RabbitMQ改写秒杀功能&quot;&gt;&lt;a href=&quot;#使用RabbitMQ改写秒杀功能&quot; class=&quot;headerlink&quot; title=&quot;使用RabbitMQ改写秒杀功能&quot;&gt;&lt;/a&gt;使用RabbitMQ改写秒杀功能&lt;/h1&gt;&lt;h2 id=&quot;实现思路&quot;&gt;&lt;a href=&quot;#实现思路&quot; class=&quot;headerlink&quot; title=&quot;实现思路&quot;&gt;&lt;/a&gt;实现思路&lt;/h2&gt;&lt;p&gt;思路：减少数据库访问 &lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="秒杀" scheme="http://yoursite.com/tags/%E7%A7%92%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot之安装RabbitMQ（踩坑）及RabbitMQ原理和使用详解</title>
    <link href="http://yoursite.com/2018/08/08/RabbitMQ/"/>
    <id>http://yoursite.com/2018/08/08/RabbitMQ/</id>
    <published>2018-08-08T02:37:14.000Z</published>
    <updated>2018-08-09T02:43:41.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot之安装RabbitMQ（踩坑）及RabbitMQ原理和使用详解"><a href="#SpringBoot之安装RabbitMQ（踩坑）及RabbitMQ原理和使用详解" class="headerlink" title="SpringBoot之安装RabbitMQ（踩坑）及RabbitMQ原理和使用详解"></a>SpringBoot之安装RabbitMQ（踩坑）及RabbitMQ原理和使用详解</h1><h2 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h2><p>安装环境centos7 + <a href="http://www.rabbitmq.com/news.html#2018-07-05T17:00:00+00:00" target="_blank" rel="noopener">RabbitMQ 3.7.7 </a>  + <a href="http://erlang.org/download/otp_src_21.0.tar.gz" target="_blank" rel="noopener">OTP 21.0 Source File</a> </p><a id="more"></a><p><strong>1.安装erlang:</strong></p><p>（1）.下载: <a href="http://www.erlang.org/downloads" target="_blank" rel="noopener">http://www.erlang.org/downloads</a></p><p>（2）.安装依赖<code>yum install ncurses-devel</code><br>        （3）.解压<code>tar xf otp_src_21.0.tar.gz</code><br>    （4）.安装目录./configure –prefix=/usr/local/erlang –without-javac</p><p>（5）编译<code>make</code></p><p>（6）安装<code>make install</code><br>    （7）验证安装是否成功  </p><p>​         <code>cd /usr/local/erlang/bin/</code><br>          执行<code>./erl</code></p><p><strong>2.安装rabbitmq</strong></p><p>rabbitmq解压即可用</p><p>（1）解压<code>xz -d rabbitmq-server-generic-unix-3.7.7.tar.xz</code><br>                       <code>tar xf rabbitmq-server-generic-unix-3.7.7.tar</code><br>    （2）安装依赖:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install python -y</span><br><span class="line">yum install xmlto -y</span><br><span class="line">yum install python-simplejson -y</span><br></pre></td></tr></table></figure><p>（3）启动:</p><p><code>cd rabbitmq/sbin/</code></p><p><code>./rabbitmq-server</code></p><p>正常到这里就完成安装了，但是我的并没有，报错了</p><h2 id="踩坑（报错四部曲）"><a href="#踩坑（报错四部曲）" class="headerlink" title="踩坑（报错四部曲）"></a>踩坑（报错四部曲）</h2><p><strong>（1）启动报错啊</strong></p><p>显示<code>./rabbitmq-server:行85: erl: 未找到命令</code></p><p>解决办法执行</p><p><code>vim /etc/profile</code></p><p>在文件中添加:<br>        <code>ERL_HOME=/usr/local/erlang</code></p><p><code>export PATH=$PATH:$ERL_HOME/bin</code></p><p><strong>（2）再启动还报错</strong></p><p>显示错误如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Error description:</span><br><span class="line">    init:do_boot/<span class="number">3</span></span><br><span class="line">    init:start_em/<span class="number">1</span></span><br><span class="line">    rabbit:start_it/<span class="number">1</span> line <span class="number">450</span></span><br><span class="line">    rabbit:broker_start/<span class="number">0</span> line <span class="number">324</span></span><br><span class="line">    rabbit_plugins:prepare_plugins/<span class="number">1</span> line <span class="number">289</span></span><br><span class="line">    rabbit_plugins:ensure_dependencies/<span class="number">1</span> line <span class="number">263</span></span><br><span class="line"><span class="keyword">throw</span>:&#123;error,&#123;missing_dependencies,[crypto,ssl],</span><br><span class="line">                                   [amqp10_client,cowboy,cowlib,rabbitmq_aws,</span><br><span class="line">                                    rabbitmq_management,</span><br><span class="line">                                    rabbitmq_management_agent,rabbitmq_shovel,</span><br><span class="line">                                    rabbitmq_trust_store]&#125;&#125;</span><br></pre></td></tr></table></figure><p>解决方法：</p><p>应该是缺少依赖，openssl的两个包</p><p>看一下自己的Linux下有没有</p><p><code>which openssl</code></p><p>我的里面是有的，显示</p><p><code>/usr/bin/openssl</code></p><p>看一下版本</p><p><code>openssl version</code></p><p>版本有点老，可能是这个原因。</p><p>重新安装spenssl</p><p><a href="https://www.openssl.org/source/" target="_blank" rel="noopener">https://www.openssl.org/source/</a><br>    安装的话就找个教程就完事了</p><p><strong>（3）安装完再启动还报错</strong></p><p>错误信息：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/openssl/bin/openssl: error <span class="keyword">while</span> loading shared libraries: libssl.so<span class="number">.1</span><span class="number">.1</span>: cannot open shared object file: No such file <span class="keyword">or</span> directory</span><br></pre></td></tr></table></figure><p>其实就是找不到libssl.so.1.1</p><p>可以做一个软连接</p><p>假如你的libssl.so.1.1 文件在/usr/local/openssl/lib/下面，可以这样做</p><p><code>ln -s /usr/local/openssl/lib/libssl.so.1.1 /usr/lib64/libssl.so.1.1</code></p><p><code>ln -s /usr/local/openssl/lib/libcrypto.so.1.1 /usr/lib64/libcrypto.so.1.1</code></p><p>完成后看一下当前版本<br>     <code>openssl version</code></p><p>显示<code>OpenSSL 1.1.0g  2 Nov 2017</code></p><p>然后重启一般就可以了</p><p><strong>（4）还报错，和2一样的错误</strong></p><p>然而我的还是还是不行，怎么办，重装erlang,<br>    然后启动rabbitmq就好使了。<br>    会看到log</p><p>tail -f <a href="mailto:/usr/local/rabbitmq/var/log/rabbitmq/rabbit@localhost.log" target="_blank" rel="noopener">/usr/local/rabbitmq/var/log/rabbitmq/rabbit@localhost.log</a><br>    看一下启动起来没有,一般是在5672端口启动的，可以看一下5672端口有没有在监听</p><p><code>netstat -nap | grep 5672</code></p><p>也可以执行</p><p><code>ps -ef | gerp rabbitmq</code></p><p>看RabbitMQ相关的服务有没有启动</p><p>关闭RabbitMQ</p><p><code>./rabbitmqctl stop</code></p><p>把rabbitmq-server 写到环境变量中</p><p><code>vim /etc/profile</code></p><p>在文件中写入</p><p><code>export PATH=$PATH:/usr/local/ruby/bin:/usr/local/erlang/bin:/usr/local/rabbitmq/sbin</code></p><p>怎么让RabbitMQ在后台运行:</p><p><code>./rabbitmq-server  -detached</code></p><h2 id="RabbitMQ基本原理"><a href="#RabbitMQ基本原理" class="headerlink" title="RabbitMQ基本原理"></a>RabbitMQ基本原理</h2><p>讲解基础概念的前面，我们先来整体构造一个结构图，这样会方便们更好地去理解RabbitMQ的基本原理。</p><p><img src="/2018/08/08/RabbitMQ/458325-20160107091118450-1592424097.png" alt="img"></p><p>   通过上面这张应用相结合的结构图既能够清晰的看清楚整体的send Message到Receive Message的一个大致的流程。当然上面有很多名词都相比还没有介绍到，不要着急接下来我们就开始对其进行详细的讲解。</p><h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a><strong>Queue</strong></h4><p>Queue（队列）RabbitMQ的作用是存储消息，队列的特性是先进先出。上图可以清晰地看到Client A和Client B是生产者，生产者生产消息最终被送到RabbitMQ的内部对象Queue中去，而消费者则是从Queue队列中取出数据。可以简化成表示为：</p><p><img src="/2018/08/08/RabbitMQ/458325-20160107091219153-26270174.png" alt="img"></p><p>生产者Send Message “A”被传送到Queue中，消费者发现消息队列Queue中有订阅的消息，就会将这条消息A读取出来进行一些列的业务操作。这里只是一个消费正对应一个队列Queue，也可以多个消费者订阅同一个队列Queue，当然这里就会将Queue里面的消息平分给其他的消费者，但是会存在一个一个问题就是如果每个消息的处理时间不同，就会导致某些消费者一直在忙碌中，而有的消费者处理完了消息后一直处于空闲状态，因为前面已经提及到了Queue会平分这些消息给相应的消费者。这里我们就可以使用prefetchCount来限制每次发送给消费者消息的个数。详情见下图所示：</p><p><img src="/2018/08/08/RabbitMQ/458325-20160107091257496-665638720.png" alt="img"></p><p>这里的prefetchCount=1是指每次从Queue中发送一条消息来。等消费者处理完这条消息后Queue会再发送一条消息给消费者。</p><h4 id="Exchange"><a href="#Exchange" class="headerlink" title="Exchange"></a><strong>Exchange</strong></h4><p>我们在开篇的时候就留了一个坑，就是那个应用结构图里面，消费者Client A和消费者Client B是如何知道我发送的消息是给Queue1还是给Queue2，有没有过这个问题，那么我们就来解开这个面纱，看看到底是个什么构造。首先明确一点就是生产者产生的消息并不是直接发送给消息队列Queue的，而是要经过Exchange（交换器），由Exchange再将消息路由到一个或多个Queue，当然这里还会对不符合路由规则的消息进行丢弃掉，这里指的是后续要谈到的Exchange Type。那么Exchange是怎样将消息准确的推送到对应的Queue的呢？那么这里的功劳最大的当属Binding，RabbitMQ是通过Binding将Exchange和Queue链接在一起，这样Exchange就知道如何将消息准确的推送到Queue中去。简单示意图如下所示：</p><p><img src="/2018/08/08/RabbitMQ/458325-20160107091338246-1623413505.png" alt="img"></p><p>在绑定（Binding）Exchange和Queue的同时，一般会指定一个Binding Key，生产者将消息发送给Exchange的时候，一般会产生一个Routing Key，当Routing Key和Binding Key对应上的时候，消息就会发送到对应的Queue中去。那么Exchange有四种类型，不同的类型有着不同的策略。也就是表明不同的类型将决定绑定的Queue不同，换言之就是说生产者发送了一个消息，Routing Key的规则是A，那么生产者会将Routing Key=A的消息推送到Exchange中，这时候Exchange中会有自己的规则，对应的规则去筛选生产者发来的消息，如果能够对应上Exchange的内部规则就将消息推送到对应的Queue中去。那么接下来就来详细讲解下Exchange里面类型。</p><h4 id="Exchange-Type"><a href="#Exchange-Type" class="headerlink" title="Exchange Type"></a><strong>Exchange Type</strong></h4><p><strong>fanout</strong></p><p>fanout类型的Exchange路由规则非常简单，它会把所有发送到该Exchange的消息路由到所有与它绑定的Queue中。</p><p><img src="/2018/08/08/RabbitMQ/458325-20160107091426887-423066137.png" alt="img"></p><p>上图所示，生产者（P）生产消息1将消息1推送到Exchange，由于Exchange Type=fanout这时候会遵循fanout的规则将消息推送到所有与它绑定Queue，也就是图上的两个Queue最后两个消费者消费。</p><p><strong>direct</strong></p><p>direct类型的Exchange路由规则也很简单，它会把消息路由到那些binding key与routing key完全匹配的Queue中</p><p><img src="/2018/08/08/RabbitMQ/458325-20160107091457637-428564110.png" alt="img"></p><p>当生产者（P）发送消息时Rotuing key=booking时，这时候将消息传送给Exchange，Exchange获取到生产者发送过来消息后，会根据自身的规则进行与匹配相应的Queue，这时发现Queue1和Queue2都符合，就会将消息传送给这两个队列，如果我们以Rotuing key=create和Rotuing key=confirm发送消息时，这时消息只会被推送到Queue2队列中，其他Routing Key的消息将会被丢弃。</p><p><strong>topic</strong></p><p>前面提到的direct规则是严格意义上的匹配，换言之Routing Key必须与Binding Key相匹配的时候才将消息传送给Queue，那么topic这个规则就是模糊匹配，可以通过通配符满足一部分规则就可以传送。它的约定是：</p><ol><li>routing key为一个句点号“. ”分隔的字符串（我们将被句点号“. ”分隔开的每一段独立的字符串称为一个单词），如“stock.usd.nyse”、“nyse.vmw”、“quick.orange.rabbit”</li><li>binding key与routing key一样也是句点号“. ”分隔的字符串</li><li>binding key中可以存在两种特殊字符“<em>”与“#”，用于做模糊匹配，其中“</em>”用于匹配一个单词，“#”用于匹配多个单词（可以是零个）</li></ol><p><img src="/2018/08/08/RabbitMQ/458325-20160107091636856-880162406.png" alt="img"></p><p>当生产者发送消息Routing Key=F.C.E的时候，这时候只满足Queue1，所以会被路由到Queue中，如果Routing Key=A.C.E这时候会被同是路由到Queue1和Queue2中，如果Routing Key=A.F.B时，这里只会发送一条消息到Queue2中。</p><p><strong>headers</strong></p><p>headers类型的Exchange不依赖于routing key与binding key的匹配规则来路由消息，而是根据发送的消息内容中的headers属性进行匹配。<br>在绑定Queue与Exchange时指定一组键值对；当消息发送到Exchange时，RabbitMQ会取到该消息的headers（也是一个键值对的形式），对比其中的键值对是否完全匹配Queue与Exchange绑定时指定的键值对；如果完全匹配则消息会路由到该Queue，否则不会路由到该Queue。<br>该类型的Exchange没有用到过（不过也应该很有用武之地），所以不做介绍。</p><p>总结成表格：</p><table><thead><tr><th>类型名称</th><th>类型描述</th></tr></thead><tbody><tr><td>Fandout</td><td>把所有发送到该Exchange的消息路由到所有与它绑定的Queue中</td></tr><tr><td>Direct</td><td>Routing Key==Binding Key</td></tr><tr><td>Topic</td><td>模糊匹配</td></tr><tr><td>Headers</td><td>Exchange不依赖于routing key与binding key的匹配规则来路由消息，而是根据发送的消息内容中的headers属性进行匹配。</td></tr></tbody></table><h4 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a>Binding</h4><p>所谓绑定就是将一个特定的 Exchange 和一个特定的 Queue 绑定起来。Exchange 和Queue的绑定可以是多对多的关系。</p><h4 id="通信过程"><a href="#通信过程" class="headerlink" title="通信过程"></a>通信过程</h4><p>假设P1和C1注册了相同的Broker，Exchange和Queue。P1发送的消息最终会被C1消费。基本的通信流程大概如下所示：</p><ol><li>P1生产消息，发送给服务器端的Exchange</li><li>Exchange收到消息，根据ROUTINKEY，将消息转发给匹配的Queue1</li><li>Queue1收到消息，将消息发送给订阅者C1</li><li>C1收到消息，发送ACK给队列确认收到消息</li><li>Queue1收到ACK，删除队列中缓存的此条消息</li></ol><p>Consumer收到消息时需要显式的向rabbit broker发送basic.ack消息或者consumer订阅消息时设置auto_ack参数为true。在通信过程中，队列对ACK的处理有以下几种情况：</p><ol><li>如果consumer接收了消息，发送ack,rabbitmq会删除队列中这个消息，发送另一条消息给consumer。</li><li>如果cosumer接受了消息, 但在发送ack之前断开连接，rabbitmq会认为这条消息没有被deliver,在consumer在次连接的时候，这条消息会被redeliver。</li><li>如果consumer接受了消息，但是程序中有bug,忘记了ack,rabbitmq不会重复发送消息。</li><li>rabbitmq2.0.0和之后的版本支持consumer reject某条（类）消息，可以通过设置requeue参数中的reject为true达到目地，那么rabbitmq将会把消息发送给下一个注册的consumer。</li></ol><h2 id="SpringBoot集成RabbitMQ"><a href="#SpringBoot集成RabbitMQ" class="headerlink" title="SpringBoot集成RabbitMQ"></a>SpringBoot集成RabbitMQ</h2><p><strong>(1)添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--rabbitmq--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>(2)添加配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#rabbitmq</span><br><span class="line">spring.rabbitmq.host=192.168.78.133</span><br><span class="line">spring.rabbitmq.port=5672</span><br><span class="line">spring.rabbitmq.username=guest</span><br><span class="line">spring.rabbitmq.password=guest</span><br><span class="line">spring.rabbitmq.virtual-host=/</span><br><span class="line">#消费者数量</span><br><span class="line">#消费者队列的数量</span><br><span class="line">spring.rabbitmq.listener.simple.concurrency= 10</span><br><span class="line">spring.rabbitmq.listener.simple.max-concurrency= 10</span><br><span class="line">#消费者每次从队列获取的消息数量</span><br><span class="line">spring.rabbitmq.listener.simple.prefetch= 1</span><br><span class="line">#消费者自动启动</span><br><span class="line">spring.rabbitmq.listener.simple.auto-startup=true</span><br><span class="line">#消费失败，自动重新入队</span><br><span class="line">spring.rabbitmq.listener.simple.default-requeue-rejected= true</span><br><span class="line">#启用发送重试</span><br><span class="line">#队列的发送者，队列满了就重置</span><br><span class="line">spring.rabbitmq.template.retry.enabled=true</span><br><span class="line">spring.rabbitmq.template.retry.initial-interval=1000 </span><br><span class="line">spring.rabbitmq.template.retry.max-attempts=3</span><br><span class="line">spring.rabbitmq.template.retry.max-interval=10000</span><br><span class="line">spring.rabbitmq.template.retry.multiplier=1.0</span><br></pre></td></tr></table></figure><p>配置去这里找：<br>       <a href="https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/</a></p><p>每个配置的详细信息是什么：<br>       <a href="https://github.com/spring-projects/spring-boot/blob/v2.0.4.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot/blob/v2.0.4.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java</a></p><p>配置完成之后，RabbitMQ有4种交换机模式，下面分别实现下。</p><h2 id="4种交换机模式实现"><a href="#4种交换机模式实现" class="headerlink" title="4种交换机模式实现"></a>4种交换机模式实现</h2><p>Direct、Topic、Fanout和Headers模式的实现如下：</p><p>（1）初始化队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.SecKill.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.retry.annotation.Backoff;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rabbitMQ配置初始化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> WilsonSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE = <span class="string">"queue"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_QUEUE1 = <span class="string">"topic.queue1"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_QUEUE2 = <span class="string">"topic.queue2"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FANOUT_QUEUE1 = <span class="string">"fanout.queue1"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FANOUT_QUEUE2 = <span class="string">"fanout.queue2"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADERS_QUEUE = <span class="string">"headers.queue"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_EXCHANGE = <span class="string">"topicExchange"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FANOUT_EXCHANGE = <span class="string">"fanoutExchange"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADERS_EXCHANGE = <span class="string">"headersExchange"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Direct 交换机模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(QUEUE,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Topic 交换机模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">topicQueue1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(TOPIC_QUEUE1,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">topicQueue2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(TOPIC_QUEUE2,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TopicExchange <span class="title">topicExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(TOPIC_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定Exchange和queue</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">topicBinding1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(<span class="string">"topic.key1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">topicBinding2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(<span class="string">"topic.#"</span>); <span class="comment">//# 通配符，代表多个单词</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Fanout模式 交换机Exchange</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">fanoutQueue1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(FANOUT_QUEUE1,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">fanoutQueue2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(FANOUT_QUEUE2,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FanoutExchange <span class="title">fanoutExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(FANOUT_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">fanoutBinding1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">fanoutBinding2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Header模式 交换机Exchange</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HeadersExchange <span class="title">headersExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HeadersExchange(HEADERS_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">headersQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(HEADERS_QUEUE,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">headersBinding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"header1"</span>,<span class="string">"value1"</span>);</span><br><span class="line">        map.put(<span class="string">"header2"</span>,<span class="string">"value2"</span>);</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(headersQueue()).to(headersExchange()).whereAll(map).match();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)消息发送者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.SecKill.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.springboot.SecKill.redis.RedisService;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> WilsonSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(MQReceiver.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Direct 交换机模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//消息发送到队列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Object message)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String msg = RedisService.Bean2String(message);</span><br><span class="line">        logger.info(<span class="string">"send topic message: "</span> + msg);</span><br><span class="line">        amqpTemplate.convertAndSend(MQConfig.QUEUE, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Topic 交换机模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTopic</span><span class="params">(Object message)</span></span>&#123;</span><br><span class="line">        String msg = RedisService.Bean2String(message);</span><br><span class="line">        logger.info(<span class="string">"send topic message: "</span> + msg);</span><br><span class="line">        amqpTemplate.convertAndSend(MQConfig.TOPIC_EXCHANGE,<span class="string">"topic.key1"</span>,msg+<span class="string">"1"</span>);</span><br><span class="line">        amqpTemplate.convertAndSend(MQConfig.TOPIC_EXCHANGE,<span class="string">"topic.key2"</span>,msg+<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Fanout模式 交换机Exchange</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendFanout</span><span class="params">(Object message)</span></span>&#123;</span><br><span class="line">        String msg = RedisService.Bean2String(message);</span><br><span class="line">        logger.info(<span class="string">"send fanout message: "</span> + msg);</span><br><span class="line">        amqpTemplate.convertAndSend(MQConfig.FANOUT_EXCHANGE,<span class="string">""</span>,msg+<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Header模式 交换机Exchange</span></span><br><span class="line"><span class="comment">     *"header1","value1"要与队列初始化的时候一样</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendHeaders</span><span class="params">(Object message)</span></span>&#123;</span><br><span class="line">        String msg = RedisService.Bean2String(message);</span><br><span class="line">        logger.info(<span class="string">"send headers message: "</span> + msg);</span><br><span class="line">        MessageProperties properties = <span class="keyword">new</span> MessageProperties();</span><br><span class="line">        properties.setHeader(<span class="string">"header1"</span>,<span class="string">"value1"</span>);</span><br><span class="line">        properties.setHeader(<span class="string">"header2"</span>,<span class="string">"value2"</span>);</span><br><span class="line">        Message obj = <span class="keyword">new</span> Message(msg.getBytes(),properties);</span><br><span class="line">        amqpTemplate.convertAndSend(MQConfig.HEADERS_EXCHANGE,<span class="string">""</span>,obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)消息接收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.SecKill.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> WilsonSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(MQReceiver.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Direct 交换机模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = MQConfig.QUEUE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"receive message"</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Topic 交换机模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = MQConfig.TOPIC_QUEUE1)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveTopic1</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"receive topic queue1 message: "</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = MQConfig.TOPIC_QUEUE2)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveTopic2</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"receive topic queue2 message: "</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Fanout模式 交换机Exchange</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = MQConfig.FANOUT_QUEUE1)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveFanout1</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"receive fanout queue1 message: "</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = MQConfig.FANOUT_QUEUE2)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveFanout2</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"receive fanout queue2 message: "</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Header模式 交换机Exchange</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = MQConfig.HEADERS_QUEUE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveFanout2</span><span class="params">(<span class="keyword">byte</span>[] message)</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"receive headers queue message: "</span> + <span class="keyword">new</span> String(message));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 启动程序，报错了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: com.rabbitmq.client.AuthenticationFailureException: ACCESS_REFUSED - Login was refused <span class="keyword">using</span> authentication mechanism PLAIN. For details see the broker logfile.</span><br></pre></td></tr></table></figure><p>其实就是拒绝我们访问啊，因为我们定义的时候就是默认的用户名和密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.rabbitmq.username=guest</span><br><span class="line">spring.rabbitmq.password=guest</span><br></pre></td></tr></table></figure><p>为什么默认的是这俩？</p><p>看一下rabbitMQ的变量定义就知道了:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Login user to authenticate to the broker.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String username = <span class="string">"guest"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Login to authenticate against the broker.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String password = <span class="string">"guest"</span>;</span><br></pre></td></tr></table></figure><p>怎么改呢？</p><p>官网这么说的</p><p> “guest” user can only connect via localhost</p><p>By default, the guest user is prohibited from connecting to the broker remotely; it can only connect over a loopback interface (i.e. localhost). This applies both to AMQP 0-9-1 and to any other protocols enabled via plugins. Any other users you create will not (by default) be restricted in this way.</p><p>The recommended way to address this in production systems is to create a new user or set of users with the permissions to access the necessary virtual hosts. This can be done using CLI tools, HTTP API or definitions import.</p><p>This is configured via the loopback_users item in the configuration file.</p><p>If you wish to allow the guest user to connect from a remote host, you should set the loopback_users configuration to none. A complete RabbitMQ config file which does this would look like:</p><p><code>loopback_users = none</code></p><p>Or, in the classic config file format (rabbitmq.config):</p><p><code>[{rabbit, [{loopback_users, []}]}].</code></p><p>其实第二种就是在usr/local/rabbitmq/etc/rabbitmq下新建rabbitmq.config文件，添加</p><p><code>[{rabbit, [{loopback_users, []}]}].</code></p><p>重启rabbitmq在运行程序就可以了</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot之安装RabbitMQ（踩坑）及RabbitMQ原理和使用详解&quot;&gt;&lt;a href=&quot;#SpringBoot之安装RabbitMQ（踩坑）及RabbitMQ原理和使用详解&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot之安装RabbitMQ（踩坑）及RabbitMQ原理和使用详解&quot;&gt;&lt;/a&gt;SpringBoot之安装RabbitMQ（踩坑）及RabbitMQ原理和使用详解&lt;/h1&gt;&lt;h2 id=&quot;安装RabbitMQ&quot;&gt;&lt;a href=&quot;#安装RabbitMQ&quot; class=&quot;headerlink&quot; title=&quot;安装RabbitMQ&quot;&gt;&lt;/a&gt;安装RabbitMQ&lt;/h2&gt;&lt;p&gt;安装环境centos7 + &lt;a href=&quot;http://www.rabbitmq.com/news.html#2018-07-05T17:00:00+00:00&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RabbitMQ 3.7.7 &lt;/a&gt;  + &lt;a href=&quot;http://erlang.org/download/otp_src_21.0.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OTP 21.0 Source File&lt;/a&gt; &lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="RabbitMQ" scheme="http://yoursite.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2之秒杀页面优化及解决超卖问题</title>
    <link href="http://yoursite.com/2018/08/05/SecKillPageOptimise/"/>
    <id>http://yoursite.com/2018/08/05/SecKillPageOptimise/</id>
    <published>2018-08-05T00:56:48.000Z</published>
    <updated>2018-08-09T02:55:35.767Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpringBoot2之秒杀页面优化及解决超卖问题"><a href="#SpringBoot2之秒杀页面优化及解决超卖问题" class="headerlink" title="SpringBoot2之秒杀页面优化及解决超卖问题"></a>SpringBoot2之秒杀页面优化及解决超卖问题</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SpringBoot2之秒杀页面优化及解决超卖问题&quot;&gt;&lt;a href=&quot;#SpringBoot2之秒杀页面优化及解决超卖问题&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot2之秒杀页面优化及解决超卖问题&quot;&gt;&lt;/a&gt;SpringBoot2
      
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="秒杀， 页面优化" scheme="http://yoursite.com/tags/%E7%A7%92%E6%9D%80%EF%BC%8C-%E9%A1%B5%E9%9D%A2%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2踩坑之SpringWebContext方法过时</title>
    <link href="http://yoursite.com/2018/08/05/SpringWebContext/"/>
    <id>http://yoursite.com/2018/08/05/SpringWebContext/</id>
    <published>2018-08-05T00:56:48.000Z</published>
    <updated>2018-08-06T12:56:49.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringWebContext方法过时"><a href="#SpringWebContext方法过时" class="headerlink" title="SpringWebContext方法过时"></a>SpringWebContext方法过时</h1><p>今天在做项目的时候，为了优化访问速度，应对高并发，想把页面信息全部获取出来存到redis缓存中，这样每次访问就不用客户端进行渲染了，速度能快不少。</p><p>想用<code>thymeleafViewResolver.getTemplateEngine().process(&quot;goodslist.html&quot;,ctx);</code>函数实现，里面有一个ctx参数，这个参数就是WebContext</p><p>然后定义这个变量 <code>SpringWebContext ctx = new SpringWebContext（......）</code></p><a id="more"></a><p>哎，这个方法在SpringBoot1.X的时候还能有，在org.thymeleaf.spring4.context这个package下，在、SpringBoot2.X +thymeleaf3.0.9 中没有，想去找一下用什么来代替，直接去org.thymeleaf.spring4下面去找，没找到相同类型的，然后取找thymeleaf.spring5的API，还找不到，只能找到thymeleaf.spring4的API,。想想还要用，怎么办啊，总不能把版本切换了吧，那有些别的说不定也得改，自己写吧，自力更生艰苦奋斗。</p><p>找了之前的一个项目，然后找到了那里面的SpringWebContext是怎么写的，超过来就完了，</p><p>但是不行SpringWebContext继承的是org.thymeleaf.context下的WebContext方法，在SpringBoot2.0+thymeleaf3.0.9中定义成final类型的，不能继承，想想要不把库的代码改了，还是算了，再往上找，找到这个<code>WebContext extends AbstractContext implements IWebContext</code>，没有final，所以一层一层的找到之后，按照他的源码改了一下，自己重写了SpringWebContext方法，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.SecKill.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.context.AbstractContext;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.context.IWebContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> WilsonSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringWebContextUtil</span>  <span class="keyword">extends</span> <span class="title">AbstractContext</span> <span class="keyword">implements</span> <span class="title">IWebContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpServletRequest request;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpServletResponse response;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServletContext servletContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BEANS_VARIABLE_NAME = <span class="string">"beans"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentHashMap&lt;ApplicationContext, HashMap&lt;String, Object&gt;&gt; variableMapPrototypes = <span class="keyword">new</span> ConcurrentHashMap();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpringWebContextUtil</span><span class="params">(<span class="keyword">final</span> HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">final</span> HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">final</span> ServletContext servletContext,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">final</span> Locale locale,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">final</span> Map&lt;String, Object&gt; variables,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">final</span> ApplicationContext appctx)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(locale,addSpringSpecificVariables(variables, appctx));</span><br><span class="line">        <span class="keyword">this</span>.request = request;</span><br><span class="line">        <span class="keyword">this</span>.response = response;</span><br><span class="line">        <span class="keyword">this</span>.servletContext = servletContext;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = appctx;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">addSpringSpecificVariables</span><span class="params">(Map&lt;String, ?&gt; variables, ApplicationContext appctx)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; variableMapPrototype = (HashMap)variableMapPrototypes.get(appctx);</span><br><span class="line">        <span class="keyword">if</span> (variableMapPrototype == <span class="keyword">null</span>) &#123;</span><br><span class="line">            variableMapPrototype = <span class="keyword">new</span> HashMap(<span class="number">20</span>, <span class="number">1.0F</span>);</span><br><span class="line">            ContexBeans beans = <span class="keyword">new</span> ContexBeans(appctx);</span><br><span class="line">            variableMapPrototype.put(<span class="string">"beans"</span>, beans);</span><br><span class="line">            variableMapPrototypes.put(appctx, variableMapPrototype);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map newVariables;</span><br><span class="line">        <span class="keyword">synchronized</span>(variableMapPrototype) &#123;</span><br><span class="line">            newVariables = (Map)variableMapPrototype.clone();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (variables != <span class="keyword">null</span>) &#123;</span><br><span class="line">            newVariables.putAll(variables);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> newVariables;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpServletRequest <span class="title">getRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpSession <span class="title">getSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.request.getSession(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpServletResponse <span class="title">getResponse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.servletContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的ContexBeans是自己定义的，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">package com.springboot.SecKill.util;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author WilsonSong</span><br><span class="line"> * @date 2018/8/5</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Collection;</span><br><span class="line">import java.util.LinkedHashSet;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Set;</span><br><span class="line">import java.util.Map.Entry;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.thymeleaf.util.Validate;</span><br><span class="line">public class ContexBeans implements Map&lt;String, Object&gt; &#123;</span><br><span class="line">    private final ApplicationContext ctx;</span><br><span class="line"></span><br><span class="line">    public ContexBeans(ApplicationContext ctx) &#123;</span><br><span class="line">        Validate.notNull(ctx, &quot;Application Context cannot be null&quot;);</span><br><span class="line">        this.ctx = ctx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean containsKey(Object key) &#123;</span><br><span class="line">        Validate.notNull(key, &quot;Key cannot be null&quot;);</span><br><span class="line">        return this.ctx.containsBean(key.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Object get(Object key) &#123;</span><br><span class="line">        Validate.notNull(key, &quot;Key cannot be null&quot;);</span><br><span class="line">        return this.ctx.getBean(key.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Set&lt;String&gt; keySet() &#123;</span><br><span class="line">        return new LinkedHashSet(Arrays.asList(this.ctx.getBeanDefinitionNames()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int size() &#123;</span><br><span class="line">        return this.ctx.getBeanDefinitionCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean isEmpty() &#123;</span><br><span class="line">        return this.ctx.getBeanDefinitionCount() &lt;= 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean containsValue(Object value) &#123;</span><br><span class="line">        throw new UnsupportedOperationException(&quot;Method \&quot;containsValue\&quot; not supported in Beans object&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Object put(String key, Object value) &#123;</span><br><span class="line">        throw new UnsupportedOperationException(&quot;Method \&quot;put\&quot; not supported in Beans object&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void putAll(Map&lt;? extends String, ?&gt; m) &#123;</span><br><span class="line">        throw new UnsupportedOperationException(&quot;Method \&quot;putAll\&quot; not supported in Beans object&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Object remove(Object key) &#123;</span><br><span class="line">        throw new UnsupportedOperationException(&quot;Method \&quot;remove\&quot; not supported in Beans object&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void clear() &#123;</span><br><span class="line">        throw new UnsupportedOperationException(&quot;Method \&quot;clear\&quot; not supported in Beans object&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Collection&lt;Object&gt; values() &#123;</span><br><span class="line">        throw new UnsupportedOperationException(&quot;Method \&quot;values\&quot; not supported in Beans object&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Set&lt;Entry&lt;String, Object&gt;&gt; entrySet() &#123;</span><br><span class="line">        throw new UnsupportedOperationException(&quot;Method \&quot;entrySet\&quot; not supported in Beans object&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就能用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringWebContext方法过时&quot;&gt;&lt;a href=&quot;#SpringWebContext方法过时&quot; class=&quot;headerlink&quot; title=&quot;SpringWebContext方法过时&quot;&gt;&lt;/a&gt;SpringWebContext方法过时&lt;/h1&gt;&lt;p&gt;今天在做项目的时候，为了优化访问速度，应对高并发，想把页面信息全部获取出来存到redis缓存中，这样每次访问就不用客户端进行渲染了，速度能快不少。&lt;/p&gt;
&lt;p&gt;想用&lt;code&gt;thymeleafViewResolver.getTemplateEngine().process(&amp;quot;goodslist.html&amp;quot;,ctx);&lt;/code&gt;函数实现，里面有一个ctx参数，这个参数就是WebContext&lt;/p&gt;
&lt;p&gt;然后定义这个变量 &lt;code&gt;SpringWebContext ctx = new SpringWebContext（......）&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="踩坑" scheme="http://yoursite.com/tags/%E8%B8%A9%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习之Windows和Linux下的JMeter压测和redis压测</title>
    <link href="http://yoursite.com/2018/08/04/JMeter/"/>
    <id>http://yoursite.com/2018/08/04/JMeter/</id>
    <published>2018-08-04T07:50:05.000Z</published>
    <updated>2018-08-09T02:56:17.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot学习之JMeter压测"><a href="#SpringBoot学习之JMeter压测" class="headerlink" title="SpringBoot学习之JMeter压测"></a>SpringBoot学习之JMeter压测</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot学习之JMeter压测&quot;&gt;&lt;a href=&quot;#SpringBoot学习之JMeter压测&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot学习之JMeter压测&quot;&gt;&lt;/a&gt;SpringBoot学习之JMeter压测&lt;/
      
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="JMeter" scheme="http://yoursite.com/tags/JMeter/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot使用JSR303参数校验并进行全局异常处理</title>
    <link href="http://yoursite.com/2018/08/02/JSR303/"/>
    <id>http://yoursite.com/2018/08/02/JSR303/</id>
    <published>2018-08-02T12:10:25.000Z</published>
    <updated>2018-08-02T14:08:59.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot使用JSR303参数校验"><a href="#SpringBoot使用JSR303参数校验" class="headerlink" title="SpringBoot使用JSR303参数校验"></a>SpringBoot使用JSR303参数校验</h1><p>开发web项目有时候我们需要对controller层传过来的参数进行一些基本的校验，比如非空，非null，整数值的范围，字符串的个数，日期，邮箱等等。最常见的就是我们直接写代码校验，这样以后比较繁琐，而且不够灵活。 不能总是写繁琐的代码来实现吧。</p><p>使用JSR303来做参数校验就方便并且整洁很多了。</p><a id="more"></a><h3 id="pop引入依赖"><a href="#pop引入依赖" class="headerlink" title="pop引入依赖"></a>pop引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--JSR303校验的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Controller中使用"><a href="#Controller中使用" class="headerlink" title="Controller中使用"></a>Controller中使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="comment">//@Valid是JSR303校验</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title">login</span><span class="params">(@Valid LoginVo loginVo)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="校验实体"><a href="#校验实体" class="headerlink" title="校验实体"></a>校验实体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.SecKill.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.springboot.SecKill.validator.IsMobile;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> WilsonSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/2/002</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginVo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@IsMobile</span></span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Length</span>(min=<span class="number">32</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMobile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMobile</span><span class="params">(String mobile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mobile = mobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"LoginVo&#123;"</span> +</span><br><span class="line">                <span class="string">"mobile='"</span> + mobile + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义校验"><a href="#自定义校验" class="headerlink" title="自定义校验"></a>自定义校验</h3><p>JSR303中给我们定义了一些常用的校验注解，如本文最后常用常用注解中所示，但是要是还不能满足学习怎么去自己定义注解呢？</p><p>参照@NotNull这个校验注解的定义方法，@NotNull是这么定义的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> javax.validation.constraints;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Repeatable;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Constraint;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Payload;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Repeatable</span>(NotNull.List.class)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint</span>(</span><br><span class="line">    validatedBy = &#123;&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NotNull &#123;</span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "</span>&#123;javax.validation.constraints.NotNull.message&#125;<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Class&lt;?&gt;[] groups() default &#123;&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Class&lt;? extends Payload&gt;[] payload() default &#123;&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span></span><br><span class="line"><span class="string">    @Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="string">    @Documented</span></span><br><span class="line"><span class="string">    public @interface List &#123;</span></span><br><span class="line"><span class="string">        NotNull[] value();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>参照上面，我们实现自己的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.SecKill.validator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Constraint;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Payload;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> WilsonSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/2/002</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint</span>(</span><br><span class="line">        validatedBy = &#123;IsMobileValidator.class&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> IsMobile &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">    <span class="comment">//校验不通过，提示默认的错误信息</span></span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "手机号码格式错误"</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现具体校验器"><a href="#实现具体校验器" class="headerlink" title="实现具体校验器"></a>实现具体校验器</h3><p>上面只是实现了自己定义的校验器的接口，具体的实现类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.SecKill.validator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.springboot.SecKill.util.ValidatorUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidator;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidatorContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JSR303具体的校验器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> WilsonSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/2/002</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsMobileValidator</span>  <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">IsMobile</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> required = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(IsMobile constraintAnnotation)</span> </span>&#123;</span><br><span class="line">        required = constraintAnnotation.required();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//校验</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s, ConstraintValidatorContext constraintValidatorContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(required)&#123;       <span class="comment">//值是必须的就判断是否合法</span></span><br><span class="line">            <span class="keyword">return</span> ValidatorUtil.isMobile(s);     <span class="comment">//不为空就判断格式</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;  <span class="comment">//若不必须就判断是否有值</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(s))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ValidatorUtil.isMobile(s);     <span class="comment">//不为空就判断格式</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>参数校验不通过就会产生错误信息，显示一大串例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;"timestamp":"2018-08-02T13:07:50.890+0000","status":400,"error":"Bad Request","errors":[&#123;"codes":["IsMobile.loginVo.mobile","IsMobile.mobile","IsMobile.java.lang.String","IsMobile"],"arguments":[&#123;"codes":["loginVo.mobile","mobile"],"arguments":null,"defaultMessage":"mobile","code":"mobile"&#125;,true],"defaultMessage":"手机号码格式错误","objectName":"loginVo","field":"mobile","rejectedValue":"22111111111","bindingFailure":false,"code":"IsMobile"&#125;],"message":"Validation failed for object='loginVo'. Error count: 1","path":"/login/do_login"&#125;</span><br></pre></td></tr></table></figure><p>为了方便查看，统一进行异常处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.SecKill.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.springboot.SecKill.result.CodeMsg;</span><br><span class="line"><span class="keyword">import</span> com.springboot.SecKill.result.Result;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.ObjectError;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> WilsonSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/2/002</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = Exception.class)       <span class="comment">//拦截所有的异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result&lt;String&gt; <span class="title">exceptionHandler</span><span class="params">(HttpServletRequest httpServletRequest, Exception e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 参数校验异常</span></span><br><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> BindException)&#123;</span><br><span class="line">            BindException ex = (BindException)e;</span><br><span class="line">            List&lt;ObjectError&gt; errors = ex.getAllErrors();</span><br><span class="line">            ObjectError error= errors.get(<span class="number">0</span>);</span><br><span class="line">            String msg = error.getDefaultMessage();</span><br><span class="line">            <span class="keyword">return</span> Result.error(CodeMsg.BIND_ERROR.fillArgs(msg));</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//其他异常</span></span><br><span class="line">            <span class="keyword">return</span> Result.error(CodeMsg.SERVER_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全局的异常处理"><a href="#全局的异常处理" class="headerlink" title="全局的异常处理"></a>全局的异常处理</h3><p>上面的知识参数检验时候的异常处理，但是在工程中很多的异常，用全局的异常处理更加方便维护。</p><p>首先定义一个全局的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.SecKill.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.springboot.SecKill.result.CodeMsg;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> WilsonSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/2/002</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CodeMsg cm;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GlobalException</span> <span class="params">(CodeMsg cm)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cm.toString());</span><br><span class="line">        <span class="keyword">this</span>.cm = cm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getSerialVersionUID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serialVersionUID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CodeMsg <span class="title">getCm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCm</span><span class="params">(CodeMsg cm)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cm = cm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在全局异常处理器中添加这个全局的异常，也就是在GlobalExceptionHandler类中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(e instanceof GlobalException)&#123;</span><br><span class="line">            GlobalException ex = (GlobalException) e;</span><br><span class="line">            return Result.error(ex.getCm());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>然后在产生异常的地方直接抛出全局异常就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (loginVo == <span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> GlobalException(CodeMsg.SERVER_ERROR);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>CodeMsg.SERVER_ERROR是自己定义的异常信息。</p><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Null</span>  被注释的元素必须为<span class="keyword">null</span></span><br><span class="line"><span class="meta">@NotNull</span>  被注释的元素不能为<span class="keyword">null</span></span><br><span class="line"><span class="meta">@AssertTrue</span>  被注释的元素必须为<span class="keyword">true</span></span><br><span class="line"><span class="meta">@AssertFalse</span>  被注释的元素必须为<span class="keyword">false</span></span><br><span class="line"><span class="meta">@Min</span>(value)  被注释的元素必须是一个数字，其值必须大于等于指定的最小值</span><br><span class="line"><span class="meta">@Max</span>(value)  被注释的元素必须是一个数字，其值必须小于等于指定的最大值</span><br><span class="line"><span class="meta">@DecimalMin</span>(value)  被注释的元素必须是一个数字，其值必须大于等于指定的最小值</span><br><span class="line"><span class="meta">@DecimalMax</span>(value)  被注释的元素必须是一个数字，其值必须小于等于指定的最大值</span><br><span class="line"><span class="meta">@Size</span>(max,min)  被注释的元素的大小必须在指定的范围内。</span><br><span class="line"><span class="meta">@Digits</span>(integer,fraction)  被注释的元素必须是一个数字，其值必须在可接受的范围内</span><br><span class="line"><span class="meta">@Past</span>  被注释的元素必须是一个过去的日期</span><br><span class="line"><span class="meta">@Future</span>  被注释的元素必须是一个将来的日期</span><br><span class="line"><span class="meta">@Pattern</span>(value) 被注释的元素必须符合指定的正则表达式。</span><br><span class="line"><span class="meta">@Email</span> 被注释的元素必须是电子邮件地址</span><br><span class="line"><span class="meta">@Length</span> 被注释的字符串的大小必须在指定的范围内</span><br><span class="line"><span class="meta">@NotEmpty</span>  被注释的字符串必须非空</span><br><span class="line"><span class="meta">@Range</span>  被注释的元素必须在合适的范围内</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot使用JSR303参数校验&quot;&gt;&lt;a href=&quot;#SpringBoot使用JSR303参数校验&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot使用JSR303参数校验&quot;&gt;&lt;/a&gt;SpringBoot使用JSR303参数校验&lt;/h1&gt;&lt;p&gt;开发web项目有时候我们需要对controller层传过来的参数进行一些基本的校验，比如非空，非null，整数值的范围，字符串的个数，日期，邮箱等等。最常见的就是我们直接写代码校验，这样以后比较繁琐，而且不够灵活。 不能总是写繁琐的代码来实现吧。&lt;/p&gt;
&lt;p&gt;使用JSR303来做参数校验就方便并且整洁很多了。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="JSR303" scheme="http://yoursite.com/tags/JSR303/"/>
    
      <category term="异常处理" scheme="http://yoursite.com/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2.0集成Redis详解及踩过的坑（Could not get a resource from the pool）</title>
    <link href="http://yoursite.com/2018/08/02/Redis/"/>
    <id>http://yoursite.com/2018/08/02/Redis/</id>
    <published>2018-08-02T01:12:40.000Z</published>
    <updated>2018-08-02T14:09:24.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot2-0集成Redis"><a href="#SpringBoot2-0集成Redis" class="headerlink" title="SpringBoot2.0集成Redis"></a>SpringBoot2.0集成Redis</h1><p>首先安装的过程就不提了。上一个项目的redis是配置在Windows下的，集成很简单，也没有做什么配置。这次为了进行测试，装在了linux下。在SpringBoot集成的过程中遇到了一些小坑，分享一下。</p><a id="more"></a><h3 id="pom文件中添加依赖"><a href="#pom文件中添加依赖" class="headerlink" title="pom文件中添加依赖"></a>pom文件中添加依赖</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入Json依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到除了Redis我还加入了JSON的依赖，这是因为我之后读取出来的数据要转换成JSON串的格式，数据可读，方便开发。</p><h3 id="application-properties文件中添加配置"><a href="#application-properties文件中添加配置" class="headerlink" title="application.properties文件中添加配置"></a>application.properties文件中添加配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#redis配置</span><br><span class="line">#Linux主机地址</span><br><span class="line">spring.redis.host=192.168.78.131</span><br><span class="line">#端口</span><br><span class="line">spring.redis.port=6379</span><br><span class="line">#超时时间，ms</span><br><span class="line">spring.redis.timeout=3000</span><br><span class="line">#连接池的最大连接数</span><br><span class="line">spring.redis.jedis.pool.max-active=10</span><br><span class="line">#链接的最大等待时间ms</span><br><span class="line">spring.redis.jedis.pool.max-wait=3000</span><br><span class="line">#连接池中的最大的等待数量</span><br><span class="line">spring.redis.jedis.pool.max-idle=10</span><br></pre></td></tr></table></figure><p>在SpringBoot2.0的版本中timeout变成了Duration类型的，从其源码中我们可以看一下是怎么定义的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimeout</span><span class="params">(Duration timeout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.timeout = timeout;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>所以正常的写法应该是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.timeout=3000ms</span><br></pre></td></tr></table></figure><p>但是这样也带来了一个问题，下面再说这个问题是什么，这里先按照初始的定义，不会报错的</p><p>正常的人可能还会在配置文件中添加redis的密码的配置，没有密码的话就不要添加这个配置，就算默认为空也会导致出现错误，不能实现OAuth认证，要是有密码的话就添加上并写上自己的密码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.password=</span><br></pre></td></tr></table></figure><h3 id="Redis的自定义初始化"><a href="#Redis的自定义初始化" class="headerlink" title="Redis的自定义初始化"></a>Redis的自定义初始化</h3><p>首先写redisConfig的文件，读取application.properties文件中yml的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.SecKill.redis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis的配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> WilsonSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/1/001</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//作为组件扫描进来</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.redis"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String host;  <span class="comment">//主机</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;  <span class="comment">//端口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> timeout;  <span class="comment">//超时时间</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.jedis.pool.max-active&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxActive;  <span class="comment">//连接池最大线程数</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.jedis.pool.max-wait&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span>  maxWait;  <span class="comment">//等待时间</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.jedis.pool.max-idle&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxIdle;<span class="comment">//最大空闲连接</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHost</span><span class="params">(String host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPort</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTimeout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimeout</span><span class="params">(<span class="keyword">int</span> timeout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.timeout = timeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maxActive;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxActive</span><span class="params">(<span class="keyword">int</span> maxActive)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxActive = maxActive;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getMaxWait</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maxWait;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxWait</span><span class="params">(<span class="keyword">long</span> maxWait)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxWait = maxWait;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxIdle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maxIdle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxIdle</span><span class="params">(<span class="keyword">int</span> maxIdle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxIdle = maxIdle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面用了两种方式来读取application.properties中的配置，一种是直接设置@ConfigurationProperties(prefix = “spring.redis”)，然后变量名与application.properties中的变量名一样，这样就可以读出来了，然后像max-wait这种变量名没法定义啊，所以又用了@Value(“${spring.redis.jedis.pool.max-idle}”)这种注解的方式来读取，当然你可以全部影注解的方式来读取，注意过程中的每一个变量的基本数据类型定义准确。maxWait和timeout这两个本来都是Duration类型的，但是这里分别写成long和int类型的。一会儿再解释这个问题。</p><p>过程中需要从redis连接池中获取redis服务，所以这里初始化jedisPool的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.SecKill.redis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> WilsonSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/1/001</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisPoolFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisConfig redisConfig;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis连接池的一些配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JedisPool <span class="title">JedisPoolFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JedisPoolConfig poolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        poolConfig.setMaxIdle(redisConfig.getMaxIdle());</span><br><span class="line">        poolConfig.setMaxTotal(redisConfig.getMaxActive());</span><br><span class="line">        poolConfig.setMaxWaitMillis((redisConfig.getMaxWait()));</span><br><span class="line"></span><br><span class="line">        JedisPool jedisPool = <span class="keyword">new</span> JedisPool(poolConfig, redisConfig.getHost(),redisConfig.getPort(),redisConfig.getTimeout());</span><br><span class="line">        <span class="keyword">return</span> jedisPool;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里解释下maxWait和timeout这两个数据类型的问题。首先</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poolConfig.setMaxWaitMillis((redisConfig.getMaxWait()));</span><br></pre></td></tr></table></figure><p>用到了maxWait这个变量，看一下setMaxWaitMillis（）函数的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxWaitMillis</span><span class="params">(<span class="keyword">long</span> maxWaitMillis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxWaitMillis = maxWaitMillis;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>maxWaitMillis这个变量是long类型的，所以执勤才那么定义。</p><p>同理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JedisPool jedisPool = new JedisPool(poolConfig, redisConfig.getHost(),redisConfig.getPort(),redisConfig.getTimeout());</span><br></pre></td></tr></table></figure><p>这里面有用到redisConfig.getTimeout()，看一下JedisPool是怎么初始化的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public JedisPool(GenericObjectPoolConfig poolConfig, String host, int port, int timeout) &#123;</span><br><span class="line">        this(poolConfig, host, port, timeout, (String)null, 0, (String)null);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到timeout是int类型的，你要一开始定义成Duration类型的，然后可能过程中会涉及到数据类型的强制准换，会不会报错不知道，有兴趣的可以试一下。</p><p>最后就是初始化redis的方法如get,set等等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.SecKill.redis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> WilsonSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(RedisService.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">get</span><span class="params">(KeyPrefix prefix, String key, Class&lt;T&gt; clazz)</span></span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">          jedis = jedisPool.getResource();</span><br><span class="line">          <span class="comment">//生成real  key</span></span><br><span class="line">          String realKey = prefix.getPrefix() + key;</span><br><span class="line">          String str = jedis.get(realKey);</span><br><span class="line">          T t = String2Bean(str, clazz);</span><br><span class="line">          <span class="keyword">return</span> t;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">"redis连接池异常"</span>+e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (jedis != <span class="keyword">null</span>)&#123;</span><br><span class="line">               jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">set</span><span class="params">(KeyPrefix prefix,String key, T value)</span></span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            jedis = jedisPool.getResource();</span><br><span class="line">            String value_new = Bean2String(value);</span><br><span class="line">            <span class="keyword">if</span> (value_new == <span class="keyword">null</span> || value_new.length() &lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//生成real  key</span></span><br><span class="line">            String realKey = prefix.getPrefix() + key;</span><br><span class="line">            <span class="comment">//过期时间</span></span><br><span class="line">            <span class="keyword">int</span> seconds = prefix.expireSeconds();</span><br><span class="line">            <span class="keyword">if</span> (seconds &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                jedis.set(realKey, value_new);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                jedis.setex(realKey,seconds,value_new);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">"redis连接池异常"</span>+e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (jedis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//key 是否存在</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Boolean <span class="title">exists</span><span class="params">(KeyPrefix prefix, String key)</span></span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            jedis = jedisPool.getResource();</span><br><span class="line">            <span class="comment">//生成real  key</span></span><br><span class="line">            String realKey = prefix.getPrefix() + key;</span><br><span class="line">            <span class="keyword">return</span> jedis.exists(realKey);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">"redis连接池异常"</span>+e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (jedis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加key对应的值</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Long <span class="title">incr</span><span class="params">(KeyPrefix prefix, String key)</span></span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            jedis = jedisPool.getResource();</span><br><span class="line">            <span class="comment">//生成real  key</span></span><br><span class="line">            String realKey = prefix.getPrefix() + key;</span><br><span class="line">            <span class="keyword">return</span> jedis.incr(realKey);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">"redis连接池异常"</span>+e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (jedis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//减少key对应的对象的值</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Long <span class="title">decr</span><span class="params">(KeyPrefix prefix, String key)</span></span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            jedis = jedisPool.getResource();</span><br><span class="line">            <span class="comment">//生成real  key</span></span><br><span class="line">            String realKey = prefix.getPrefix() + key;</span><br><span class="line">            <span class="keyword">return</span> jedis.decr(realKey);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">"redis连接池异常"</span>+e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (jedis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//bean对象准换为String</span></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">String <span class="title">Bean2String</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; clazz = value.getClass();</span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="keyword">int</span>.class || clazz == Integer.class)&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="string">""</span>+value;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (clazz == String.class)&#123;</span><br><span class="line">            <span class="keyword">return</span> (String)value;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (clazz == <span class="keyword">long</span>.class || clazz == Long.class)&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="string">""</span>+value;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> JSON.toJSONString(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//String转换为bean</span></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">String2Bean</span><span class="params">(String str, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() &lt;<span class="number">0</span> || clazz == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="keyword">int</span>.class || clazz == Integer.class)&#123;</span><br><span class="line">            <span class="keyword">return</span>  (T)Integer.valueOf(str);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (clazz == String.class)&#123;</span><br><span class="line">            <span class="keyword">return</span> (T)str;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (clazz == <span class="keyword">long</span>.class || clazz == Long.class)&#123;</span><br><span class="line">            <span class="keyword">return</span> (T)Long.valueOf(str);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> JSON.toJavaObject(JSON.parseObject(str),clazz);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在controller中编写一个方法实现对service层的调用即可，就不赘述了。</p><h3 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h3><p>运行程序发现报出异常</p><p>Could not get a resource from the pool。</p><p>其实也就是在执行</p><p>jedis = jedisPool.getResource();这一步时出错了</p><ol><li>首先第一种可能是你的redis服务没开启，检查下。</li><li>确认开启了之后就修改你的redis.conf文件，把bind  127.0.0.1改成bind  0.0.0.0，</li></ol><p>​       也就是把redis的访问权限有只能本机访问改成所有的都能访问。</p><ol start="3"><li>最后可能的原因有你的Linux的防火墙没有开放Redis的端口，可以配置打开，也可以直接关掉防火墙，我这里直接关掉了Linux的防火墙。</li></ol><p>我用的是centos7</p><p>永久关闭防火墙的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//临时关闭</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">//禁止开机启动</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><p>这样你再测试下，要是还不能用还有别的原因，可以自己上网去看一下具体怎么解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot2-0集成Redis&quot;&gt;&lt;a href=&quot;#SpringBoot2-0集成Redis&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot2.0集成Redis&quot;&gt;&lt;/a&gt;SpringBoot2.0集成Redis&lt;/h1&gt;&lt;p&gt;首先安装的过程就不提了。上一个项目的redis是配置在Windows下的，集成很简单，也没有做什么配置。这次为了进行测试，装在了linux下。在SpringBoot集成的过程中遇到了一些小坑，分享一下。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>机器学习之逻辑回归（Logistic Regression）与决策边界</title>
    <link href="http://yoursite.com/2018/07/30/LogisticRegression/"/>
    <id>http://yoursite.com/2018/07/30/LogisticRegression/</id>
    <published>2018-07-30T01:57:57.000Z</published>
    <updated>2018-08-02T14:09:14.553Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逻辑回归与决策边界"><a href="#逻辑回归与决策边界" class="headerlink" title="逻辑回归与决策边界"></a>逻辑回归与决策边界</h1><h2 id="what？"><a href="#what？" class="headerlink" title="what？"></a>what？</h2><p>逻辑回归其实是一个分类算法而不是回归算法。通常是利用已知的自变量来预测一个离散型因变量的值（像二进制值0/1，是/否，真/假）。简单来说，它就是通过拟合一个逻辑函数（logit fuction）来预测一个事件发生的概率。所以它预测的是一个概率值，自然，它的输出值应该在0到1之间。</p><p>Logistic回归简单分析:</p><p>优点：计算代价不高，易于理解和实现<br>　　缺点：容易欠拟合，分类精度可能不高<br>　　适用数据类型：数值型和标称型数据</p><a id="more"></a><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>按照我自己的理解，可以简单的描述为这样的过程：</p><ol><li><p>找一个合适的预测函数，一般表示为h函数，该函数就是我们需要找的分类函数，它用来预测输入数据的判断结果。这个过程时非常关键的，需要对数据有一定的了解或分析，知道或者猜测预测函数的“大概”形式，比如是线性函数还是非线性函数。<br>借助sigmoid函数构造出的预测函数形式一般为：<br>$$<br>h_{\theta }(x) = g(\theta ^{_{T}}x) = \frac{1}{1+e^{-\theta ^{T}x}}<br>$$<br>其中sigmoid函数为:<br><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/LR%2FLR1.png" alt="sigmoid"></p></li><li><p>构造一个Cost函数（损失函数），该函数表示预测的输出（h）与训练数据类别（y）之间的偏差，可以是二者之间的差（h-y）或者是其他的形式。cost函数为：<br>$$<br>Cost(h_{\theta }x,y) = \begin{cases} -log(h_{\theta }(x))&amp; \text{ if } y=1 \ -log(1-h_{\theta }(x))&amp; \text{ if } y=0 \end{cases}<br>$$<br>综合考虑所有训练数据的“损失”，将Cost求和或者求平均，记为J(θ)函数，表示所有训练数据预测值与实际类别的偏差。J(θ函数一般为：<br>$$<br>J(\theta ) = -\frac{1}{m}[\sum_{i=1}^{m}(y_{i}logh_{\theta }(x_{i})+(1-y_{i})log(1-h_{\theta }(x_{i})))]<br>$$</p></li><li><p>显然，J(θ)函数的值越小表示预测函数越准确（即h函数越准确），所以这一步需要做的是找到J(θ)函数的最小值。找函数的最小值有不同的方法，Logistic Regression实现时用的是梯度下降法（Gradient Descent）。<br>&emsp;关于详细的公式推导就不介绍了</p><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">初始化线性函数参数为<span class="number">1</span></span><br><span class="line">构造sigmoid函数</span><br><span class="line">重复循环I次</span><br><span class="line">    计算数据集梯度</span><br><span class="line">    更新线性函数参数</span><br><span class="line">确定最终的sigmoid函数</span><br><span class="line">输入训练（测试）数据集</span><br><span class="line">运用最终sigmoid函数求解分类</span><br></pre></td></tr></table></figure></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>   逻辑回归的python代码：</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">    <span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LogisticRegression</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""初始化Logistic Regression模型"""</span></span><br><span class="line">        self.coef_ = <span class="keyword">None</span></span><br><span class="line">        self.intercept_ = <span class="keyword">None</span></span><br><span class="line">        self._theta = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_sigmoid</span><span class="params">(self, t)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span> / (<span class="number">1.0</span> + np.exp(-t))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, X_train, y_train, eta=<span class="number">0.01</span>, n_iters=<span class="number">1e4</span>)</span>:</span></span><br><span class="line">        <span class="string">"""根据训练数据集X_train, y_train, 使用梯度下降法训练Logictic Regression模型"""</span></span><br><span class="line">        <span class="keyword">assert</span> X_train.shape[<span class="number">0</span>] == y_train.shape[<span class="number">0</span>], \</span><br><span class="line">            <span class="string">"the size of X_train must be equal to the size of y_train"</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">J</span><span class="params">(theta, X_b, y)</span>:</span></span><br><span class="line">            y_hat = self._sigmoid(X_b.dot(theta))</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">return</span> -np.sum(y*np.log(y_hat) + (<span class="number">1</span>-y)*np.log(<span class="number">1</span>-y_hat)) / len(y)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">return</span> float(<span class="string">'inf'</span>)</span><br><span class="line">        <span class="string">'''逻辑回归'''</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dJ</span><span class="params">(theta, X_b, y)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> X_b.T.dot(self._sigmoid(X_b.dot(theta)) - y) / len(X_b)</span><br><span class="line"></span><br><span class="line">        <span class="string">'''梯度下降法'''</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">gradient_descent</span><span class="params">(X_b, y, initial_theta, eta, n_iters=<span class="number">1e4</span>, epsilon=<span class="number">1e-8</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">            theta = initial_theta</span><br><span class="line">            cur_iter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> cur_iter &lt; n_iters:</span><br><span class="line">                gradient = dJ(theta, X_b, y)</span><br><span class="line">                last_theta = theta</span><br><span class="line">                theta = theta - eta * gradient</span><br><span class="line">                <span class="keyword">if</span> (abs(J(theta, X_b, y) - J(last_theta, X_b, y)) &lt; epsilon):</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                cur_iter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> theta</span><br><span class="line"></span><br><span class="line">        X_b = np.hstack([np.ones((len(X_train), <span class="number">1</span>)), X_train])</span><br><span class="line">        initial_theta = np.zeros(X_b.shape[<span class="number">1</span>])</span><br><span class="line">        self._theta = gradient_descent(X_b, y_train, initial_theta, eta, n_iters)</span><br><span class="line"></span><br><span class="line">        self.intercept_ = self._theta[<span class="number">0</span>]</span><br><span class="line">        self.coef_ = self._theta[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict_proba</span><span class="params">(self, X_predict)</span>:</span></span><br><span class="line">        <span class="string">"""给定待预测数据集X_predict，返回表示X_predict的结果概率向量"""</span></span><br><span class="line">        <span class="keyword">assert</span> self.intercept_ <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> self.coef_ <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>, \</span><br><span class="line">            <span class="string">"must fit before predict!"</span></span><br><span class="line">        <span class="keyword">assert</span> X_predict.shape[<span class="number">1</span>] == len(self.coef_), \</span><br><span class="line">            <span class="string">"the feature number of X_predict must be equal to X_train"</span></span><br><span class="line"></span><br><span class="line">        X_b = np.hstack([np.ones((len(X_predict), <span class="number">1</span>)), X_predict])</span><br><span class="line">        <span class="keyword">return</span> self._sigmoid(X_b.dot(self._theta))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, X_predict)</span>:</span></span><br><span class="line">        <span class="string">"""给定待预测数据集X_predict，返回表示X_predict的结果向量"""</span></span><br><span class="line">        <span class="keyword">assert</span> self.intercept_ <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> self.coef_ <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>, \</span><br><span class="line">            <span class="string">"must fit before predict!"</span></span><br><span class="line">        <span class="keyword">assert</span> X_predict.shape[<span class="number">1</span>] == len(self.coef_), \</span><br><span class="line">            <span class="string">"the feature number of X_predict must be equal to X_train"</span></span><br><span class="line"></span><br><span class="line">        proba = self.predict_proba(X_predict)</span><br><span class="line">        <span class="keyword">return</span> np.array(proba &gt;= <span class="number">0.5</span>, dtype=<span class="string">'int'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self, X_test, y_test)</span>:</span></span><br><span class="line">        <span class="string">"""根据测试数据集 X_test 和 y_test 确定当前模型的准确度"""</span></span><br><span class="line"></span><br><span class="line">        y_predict = self.predict(X_test)</span><br><span class="line">        <span class="string">''''分类的准确度'''</span></span><br><span class="line">        <span class="keyword">return</span> accuracy_score(y_test, y_predict)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"LogisticRegression()</span></span><br></pre></td></tr></table></figure><p><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/LR%2FLR2.png" alt="测试数据"><br>        上述结果为本次测试数据,可以看出来该数据集其实是三维的数据，因为逻辑回归只能解决二分类的问题，因此取数据集中的前两维数据，作为两种类别，因此使用该数据集可以用来判断逻辑回归测试结果的好坏<br>        测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> playML.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> playML.LogisticRegression <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x, y, seed=<span class="number">666</span>)</span><br><span class="line">log_reg = LogisticRegression()</span><br><span class="line">log_reg.fit(x_train, y_train)</span><br><span class="line">log_reg.score(x_test, y_test)</span><br><span class="line">log_reg.predict_proba(x_test)</span><br></pre></td></tr></table></figure><p>输出的测试结果：</p><figure class="highlight plain"><figcaption><span>0.98664939, 0.14852024, 0.17601199, 0.0369836 ,0.0186637 , 0.04936918, 0.99669244, 0.97993941, 0.74524655,0.04473194, 0.00339285, 0.26131273, 0.0369836 , 0.84192923,0.79892262, 0.82890209, 0.32358166, 0.06535323, 0.20735334])```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">对于上述简单的测试数据，输出的array中的数据表示将某个数据分类成某一类别的概率，越接近于0就越趋近于分类成0这个类别，同理越趋近与1，就越趋近于分类成1，最后的分类的测试值输出为1.</span><br><span class="line"></span><br><span class="line">### 决策边界</span><br><span class="line"></span><br><span class="line">怎么对新输入的数据进行预测分类呢？</span><br><span class="line">每输入一个值&lt;a href=&quot;http://www.codecogs.com/eqnedit.php?latex=x^&#123;_&#123;b&#125;&#125;&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://latex.codecogs.com/gif.latex?x^&#123;_&#123;b&#125;&#125;&quot; title=&quot;x^&#123;_&#123;b&#125;&#125;&quot; /&gt;&lt;/a&gt;，与\theta ^&#123;T&#125;点乘，&lt;a href=&quot;http://www.codecogs.com/eqnedit.php?latex=x^&#123;_&#123;b&#125;&#125;&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://latex.codecogs.com/gif.latex?x^&#123;_&#123;b&#125;&#125;&quot; title=&quot;x^&#123;_&#123;b&#125;&#125;&quot; /&gt;&lt;/a&gt;·$\theta ^&#123;T&#125;$&gt;0，p&gt;0.5，&lt;a href=&quot;http://www.codecogs.com/eqnedit.php?latex=x^&#123;_&#123;b&#125;&#125;&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://latex.codecogs.com/gif.latex?x^&#123;_&#123;b&#125;&#125;&quot; title=&quot;x^&#123;_&#123;b&#125;&#125;&quot; /&gt;&lt;/a&gt;·$\theta ^&#123;T&#125;$&lt;0，p&lt;0.5,这样就能实类别的分类。当&lt;a href=&quot;http://www.codecogs.com/eqnedit.php?latex=x^&#123;_&#123;b&#125;&#125;&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://latex.codecogs.com/gif.latex?x^&#123;_&#123;b&#125;&#125;&quot; title=&quot;x^&#123;_&#123;b&#125;&#125;&quot; /&gt;&lt;/a&gt;·$\theta ^&#123;T&#125;$=0就称为该分类的决策边界。</span><br><span class="line">然后使用上面简单的数据集，绘制决策边界，其实也就是分类的边界，当有新的数据的时候骡子坳那边就分类为该类别。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">def x2(x1):</span><br><span class="line">return (-log_reg.coef_[0] * x1 - log_reg.intercept_) / log_reg.coef_[1]</span><br><span class="line">x1_plot = np.linspace(4, 8, 1000)</span><br><span class="line">x2_plot = x2(x1_plot)</span><br><span class="line">plt.scatter(x[y==0,0], x[y==0,1], color=&apos;red&apos;)</span><br><span class="line">plt.scatter(x[y==1,0], x[y==1,1], color=&apos;blue&apos;)</span><br><span class="line">plt.plot(x1_plot, x2_plot)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>得到的结果如下：</p><p><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/LR%2FLR3.png" alt="决策边界"></p><p>上述的决策边界是一条直线，所以不严格的说还是属于线性分类，当分类数据不线性的时候就需要不规则的决策边界。<br>    举个例子使用KNN算法来对上述数据进行分类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line">knn_clf = KNeighborsClassifier()</span><br><span class="line">knn_clf.fit(x_train, y_train)</span><br><span class="line">knn_clf.score(x_test, y_test)</span><br><span class="line">plot_decision_boundary(knn_clf, axis=[<span class="number">4</span>, <span class="number">7.5</span>, <span class="number">1.5</span>, <span class="number">4.5</span>])</span><br><span class="line">plt.scatter(x[y==<span class="number">0</span>,<span class="number">0</span>], x[y==<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.scatter(x[y==<span class="number">1</span>,<span class="number">0</span>], x[y==<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/LR%2FLR4.png" alt="KNN"><br>    可以看出通过使用KNN方法对上述数据的决策边界就是不规则的<br>    因为KNN是支持多类别数据的分类的，然后我们的数据集也是3中类别的，所以测试下KNN在三分类中的分类的效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">knn_clf_all = KNeighborsClassifier()</span><br><span class="line">knn_clf_all.fit(iris.data[:,:<span class="number">2</span>], iris.target)</span><br><span class="line"><span class="comment"># 欠拟合</span></span><br><span class="line">plot_decision_boundary(knn_clf_all, axis=[<span class="number">4</span>, <span class="number">8</span>, <span class="number">1.5</span>, <span class="number">4.5</span>])</span><br><span class="line">plt.scatter(iris.data[iris.target==<span class="number">0</span>,<span class="number">0</span>], iris.data[iris.target==<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.scatter(iris.data[iris.target==<span class="number">1</span>,<span class="number">0</span>], iris.data[iris.target==<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">plt.scatter(iris.data[iris.target==<span class="number">2</span>,<span class="number">0</span>], iris.data[iris.target==<span class="number">2</span>,<span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>得到的结果如下：<br><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/LR%2FLR5.png" alt="KNN-3"></p><p>可以看出分类的结果是非常的不规则的，其实也就是应该是发生了过拟合的问题。<br>    对于KNeighborsClassifier()这个函数其实其中有一个参数是可以调节的,就是n_neighbors这个参数，可以直接运行 knn_clf_all = KNeighborsClassifier()查看其中的参数，n_neighbors这个参数的含义其实就是分类的复杂程度，越小的话越复杂，就容易出现过拟合的问题。这里调节下这个参数看一下效果，设置knn_clf_all = KNeighborsClassifier(n_neighbors = 50)，其余代码相同<br>    得到的结果如下:<br><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/LR%2FLR6.png" alt="KNN-n_50"></p><p>明显能够看出来决策边界规则了许多，但是相应的分类效果弱了一些，所以调参，调参。<br>    上面的数据集是可以线性分类的，当数据的类别线性不可分的时候，逻辑回归的方式怎么去处理呢？举个例子：<br><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/LR%2FLR7.png" alt="非线性数据"></p><p>当数据集是这样的，显然线性不可分，决策边界是不规则类似于圆。其实这个时候就需要类似于使用多项式回归的方式来处理。给逻辑回归中添加多项式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> playML.LogisticRegression <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line">log_reg = LogisticRegression()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_decision_boundary</span><span class="params">(model, axis)</span>:</span></span><br><span class="line"></span><br><span class="line">x0, x1 = np.meshgrid(</span><br><span class="line">np.linspace(axis[<span class="number">0</span>], axis[<span class="number">1</span>], int((axis[<span class="number">1</span>]-axis[<span class="number">0</span>])*<span class="number">100</span>)).reshape(<span class="number">-1</span>,<span class="number">1</span>),</span><br><span class="line">np.linspace(axis[<span class="number">2</span>], axis[<span class="number">3</span>], int((axis[<span class="number">3</span>]-axis[<span class="number">2</span>])*<span class="number">100</span>)).reshape(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line">X_new = np.c_[x0.ravel(), x1.ravel()]</span><br><span class="line"></span><br><span class="line">y_predict = model.predict(X_new)</span><br><span class="line">zz = y_predict.reshape(x0.shape)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> ListedColormap</span><br><span class="line">custom_cmap = ListedColormap([<span class="string">'#EF9A9A'</span>,<span class="string">'#FFF59D'</span>,<span class="string">'#90CAF9'</span>])</span><br><span class="line"></span><br><span class="line">plt.contourf(x0, x1, zz, linewidth=<span class="number">5</span>, cmap=custom_cmap)</span><br><span class="line"></span><br><span class="line"><span class="comment">#多项式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PolynomialLogisticRegression</span><span class="params">(degree)</span>:</span></span><br><span class="line"><span class="keyword">return</span> Pipeline([</span><br><span class="line">(<span class="string">'poly'</span>, PolynomialFeatures(degree=degree)),  <span class="comment">#多项式参数</span></span><br><span class="line">(<span class="string">'std_scaler'</span>, StandardScaler()),   <span class="comment">#标准化（归一化）</span></span><br><span class="line">(<span class="string">'log_reg'</span>, LogisticRegression())  <span class="comment">#逻辑回归对象</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">poly_log_reg = PolynomialLogisticRegression(degree=<span class="number">2</span>)</span><br><span class="line">poly_log_reg.fit(X, y)</span><br><span class="line">plot_decision_boundary(poly_log_reg, [<span class="number">-4</span>, <span class="number">4</span>, <span class="number">-4</span>, <span class="number">4</span>])</span><br><span class="line">plt.scatter(X[y==<span class="number">0</span>,<span class="number">0</span>], X[y==<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.scatter(X[y==<span class="number">1</span>,<span class="number">0</span>], X[y==<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">plt.show()</span><br><span class="line">print(<span class="string">"准确度："</span> + str(poly_log_reg.score(X, y)))</span><br></pre></td></tr></table></figure><p>得到如下的结果：<br><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/LR%2FLR8.png" alt="非线性LR"></p><p>可以看出添加了多项式的逻辑回归可以解决非线性可分的问题。</p><h3 id="逻辑回归中使用正则化处理过拟合的问题"><a href="#逻辑回归中使用正则化处理过拟合的问题" class="headerlink" title="逻辑回归中使用正则化处理过拟合的问题"></a>逻辑回归中使用正则化处理过拟合的问题</h3><p>因为数据线性不可分的时候，需要在逻辑回归中引入多项式，这也使得分类变得复杂，容桂产生过拟合的问题，解决方法有两个，一个是调节degree参数，另一种就是正则化。通用的正则化的方式就是在J(θ)函数中加一个正则项，使用J(θ）+aL2作为新的损失函数。a用来调节J(θ)和L2各自所占比重。这里C·J(θ）+L1作为所示函数，其实C也是用来平衡J(θ)和L1，原理是一样的。L1和L2是正则化中的一个重要的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=<span class="number">666</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PolynomialLogisticRegression2</span><span class="params">(degree, C, penalty=<span class="string">'l2'</span>)</span>:</span></span><br><span class="line"><span class="keyword">return</span> Pipeline([</span><br><span class="line">(<span class="string">'poly'</span>, PolynomialFeatures(degree=degree)),</span><br><span class="line">(<span class="string">'std_scaler'</span>, StandardScaler()),</span><br><span class="line">(<span class="string">'log_reg'</span>, LogisticRegression(C=C, penalty=penalty))</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">poly_log_reg2 = PolynomialLogisticRegression2(degree=<span class="number">10</span>, C=<span class="number">13</span>, penalty=<span class="string">'l1'</span>)</span><br><span class="line">poly_log_reg2.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">plot_decision_boundary(poly_log_reg2, [<span class="number">-4</span>, <span class="number">4</span>, <span class="number">-4</span>, <span class="number">4</span>])</span><br><span class="line">plt.scatter(X[y==<span class="number">0</span>,<span class="number">0</span>], X[y==<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.scatter(X[y==<span class="number">1</span>,<span class="number">0</span>], X[y==<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/LR%2FLR9.png" alt=""></p><p>说实话这里选取的数据集的代表性不太够，没有太突出正则化的优点，注重点在方法的实现上，但是还是能看出有一点区别的，决策边界更加清楚了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;逻辑回归与决策边界&quot;&gt;&lt;a href=&quot;#逻辑回归与决策边界&quot; class=&quot;headerlink&quot; title=&quot;逻辑回归与决策边界&quot;&gt;&lt;/a&gt;逻辑回归与决策边界&lt;/h1&gt;&lt;h2 id=&quot;what？&quot;&gt;&lt;a href=&quot;#what？&quot; class=&quot;headerlink&quot; title=&quot;what？&quot;&gt;&lt;/a&gt;what？&lt;/h2&gt;&lt;p&gt;逻辑回归其实是一个分类算法而不是回归算法。通常是利用已知的自变量来预测一个离散型因变量的值（像二进制值0/1，是/否，真/假）。简单来说，它就是通过拟合一个逻辑函数（logit fuction）来预测一个事件发生的概率。所以它预测的是一个概率值，自然，它的输出值应该在0到1之间。&lt;/p&gt;
&lt;p&gt;Logistic回归简单分析:&lt;/p&gt;
&lt;p&gt;优点：计算代价不高，易于理解和实现&lt;br&gt;　　缺点：容易欠拟合，分类精度可能不高&lt;br&gt;　　适用数据类型：数值型和标称型数据&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习，逻辑回归" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%8C%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>机器学习之线性回归（Linear Regression）</title>
    <link href="http://yoursite.com/2018/07/30/LinearRegression/"/>
    <id>http://yoursite.com/2018/07/30/LinearRegression/</id>
    <published>2018-07-30T01:42:31.000Z</published>
    <updated>2018-08-02T14:09:18.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>线性回归(Linear Regression)是利用称为线性回归方程的最小平方函数对一个或多个自变量和因变量之间关系进行建模的一种回归分析。这种函数是一个或多个称为回归系数的模型参数的线性组合。</p><p>回归分析中，只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。<br>        其特点为：</p><ul><li><p>解决回归问题</p></li><li><p>思想简单，实现容易</p></li><li><p>许多强大的非线性模型的基础</p></li><li><p>结果具有很好的可解释性</p></li><li><p>蕴含机器学习中的很多重要思想</p><a id="more"></a> <h2 id="简单线性回归的实现"><a href="#简单线性回归的实现" class="headerlink" title="简单线性回归的实现"></a>简单线性回归的实现</h2><p>下面我们来举例何为一元线性回归分析:</p><pre><code>首先假设有这样一组数据</code></pre><p><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/LinearRegression%2FLinear1.png" alt="dataset"></p><pre><code>从数据中我们可以看出，可以找到一条直线实现数据的拟合，这条直线设为                            y=ax+b那怎么计算a和b的参数，公式如下:</code></pre><p><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/LinearRegression%2FLinear2.png" alt="ab"></p><p>jupyter notebook中具体的代码实现：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">x_mean = np.mean(x)</span><br><span class="line">y_mean = np.mean(y)</span><br><span class="line"><span class="comment">#分子</span></span><br><span class="line">num = <span class="number">0.0</span></span><br><span class="line"><span class="comment">#分母</span></span><br><span class="line">d = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">for</span> x_i, y_i <span class="keyword">in</span> zip(x, y):</span><br><span class="line">num += (x_i - x_mean) * (y_i - y_mean)</span><br><span class="line">d += (x_i - x_mean) ** <span class="number">2</span></span><br><span class="line">a = num/d</span><br><span class="line">b = y_mean - a*x_mean</span><br><span class="line">y_hat = a*x + b</span><br><span class="line">plt.scatter(x,y)</span><br><span class="line">plt.plot(x,y_hat,color=<span class="string">"r"</span>)</span><br><span class="line">plt.axis([<span class="number">0</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">6</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>得到了拟合数据的直线：<br><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/LinearRegression%2FLinear3.png" alt="拟合直线"></p><p>这里还可以在底层自己实现线性回归的算法，然后在jupyter notebook中调用，相应的pycharm的代码为：</p><pre><code>import numpy as npfrom sklearn.metrics import r2_scoreclass LinearRegression:def __init__(self):&quot;&quot;&quot;初始化Linear Regression模型&quot;&quot;&quot;self.coef_ = Noneself.intercept_ = Noneself._theta = Nonedef fit_normal(self, X_train, y_train):&quot;&quot;&quot;根据训练数据集X_train, y_train训练Linear Regression模型&quot;&quot;&quot;assert X_train.shape[0] == y_train.shape[0], \&quot;the size of X_train must be equal to the size of y_train&quot;X_b = np.hstack([np.ones((len(X_train), 1)), X_train])self._theta = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y_train)self.intercept_ = self._theta[0]self.coef_ = self._theta[1:]return selfdef fit_gd(self, X_train, y_train, eta=0.01, n_iters=1e4):&quot;&quot;&quot;根据训练数据集X_train, y_train, 使用梯度下降法训练Linear Regression模型&quot;&quot;&quot;assert X_train.shape[0] == y_train.shape[0], \&quot;the size of X_train must be equal to the size of y_train&quot;def J(theta, X_b, y):try:return np.sum((y - X_b.dot(theta)) ** 2) / len(y)except:return float(&apos;inf&apos;)def dJ(theta, X_b, y):# res = np.empty(len(theta))# res[0] = np.sum(X_b.dot(theta) - y)# for i in range(1, len(theta)):# res[i] = (X_b.dot(theta) - y).dot(X_b[:, i])# return res * 2 / len(X_b)return X_b.T.dot(X_b.dot(theta) - y) * 2. / len(X_b)def gradient_descent(X_b, y, initial_theta, eta, n_iters=1e4, epsilon=1e-8):theta = initial_thetacur_iter = 0while cur_iter &lt; n_iters:gradient = dJ(theta, X_b, y)last_theta = thetatheta = theta - eta * gradientif (abs(J(theta, X_b, y) - J(last_theta, X_b, y)) &lt; epsilon):breakcur_iter += 1return thetaX_b = np.hstack([np.ones((len(X_train), 1)), X_train])initial_theta = np.zeros(X_b.shape[1])self._theta = gradient_descent(X_b, y_train, initial_theta, eta, n_iters)self.intercept_ = self._theta[0]self.coef_ = self._theta[1:]return selfdef fit_sgd(self, X_train, y_train, n_iters=5, t0=5, t1=50):&quot;&quot;&quot;根据训练数据集X_train, y_train, 使用梯度下降法训练Linear Regression模型&quot;&quot;&quot;assert X_train.shape[0] == y_train.shape[0], \&quot;the size of X_train must be equal to the size of y_train&quot;assert n_iters &gt;= 1def dJ_sgd(theta, X_b_i, y_i):return X_b_i * (X_b_i.dot(theta) - y_i) * 2.def sgd(X_b, y, initial_theta, n_iters, t0=5, t1=50):def learning_rate(t):return t0 / (t + t1)theta = initial_thetam = len(X_b)for cur_iter in range(n_iters):indexes = np.random.permutation(m)X_b_new = X_b[indexes]y_new = y[indexes]for i in range(m):gradient = dJ_sgd(theta, X_b_new[i], y_new[i])theta = theta - learning_rate(cur_iter * m + i) * gradientreturn thetaX_b = np.hstack([np.ones((len(X_train), 1)), X_train])initial_theta = np.random.randn(X_b.shape[1])self._theta = sgd(X_b, y_train, initial_theta, n_iters, t0, t1)self.intercept_ = self._theta[0]self.coef_ = self._theta[1:]return selfdef predict(self, X_predict):&quot;&quot;&quot;给定待预测数据集X_predict，返回表示X_predict的结果向量&quot;&quot;&quot;assert self.intercept_ is not None and self.coef_ is not None, \&quot;must fit before predict!&quot;assert X_predict.shape[1] == len(self.coef_), \&quot;the feature number of X_predict must be equal to X_train&quot;X_b = np.hstack([np.ones((len(X_predict), 1)), X_predict])return X_b.dot(self._theta)def score(self, X_test, y_test):&quot;&quot;&quot;根据测试数据集 X_test 和 y_test 确定当前模型的准确度&quot;&quot;&quot;y_predict = self.predict(X_test)return r2_score(y_test, y_predict)def __repr__(self):return &quot;LinearRegression()&quot;</code></pre><p>​<br>    这里其实就是一个简单的一元数据的一个简答线性回归算法。</p><h2 id="线性回归评价指标"><a href="#线性回归评价指标" class="headerlink" title="线性回归评价指标"></a>线性回归评价指标</h2><p>那怎么去评价线性回归算法的指标的好坏呢？<br>    常用得三个指标：均方误差MSE、均方根误差RMSE、平均绝对误差MAE，这三类算法具体公式这些就不再赘述了，这三类指标都存在一个局限性：作用域的使用范围，对不同事物的预测缺乏统一标准，这样就引出了新的一个预测指标R Squared，其实就是R^2,关于R^2的解释如下：<br><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/LinearRegression%2FLinear4.png" alt="R^2"></p><p>从上面的图中我们到关于R^2的公式，公式中上面分子就是我们训练出的模型预测的所有误差。 下面分母就是    不管什么我们猜的结果就是y的平均数。（其实也就是我们瞎猜的误差）<br>    那具体实现下这些评价指标，首先换一个数据集，上面是我们自己构造的的太简单了，<br>    导入sklearn中的datasets</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error, mean_absolute_error</span><br><span class="line"></span><br><span class="line">boston = datasets.load_boston()</span><br><span class="line">x = boston.data[:,<span class="number">5</span>]</span><br><span class="line">y = boston.target</span><br><span class="line">x = x[y&lt;<span class="number">50.0</span>]</span><br><span class="line">y = y[y&lt;<span class="number">50.0</span>]</span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 划分训练集和测试集</span></span><br><span class="line"></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单线性规划</span></span><br><span class="line">x_mean = np.mean(x_train)</span><br><span class="line">y_mean = np.mean(y_train)</span><br><span class="line"><span class="comment"># 分子</span></span><br><span class="line">num = <span class="number">0.0</span></span><br><span class="line"><span class="comment"># 分母</span></span><br><span class="line">d = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">for</span> x_i, y_i <span class="keyword">in</span> zip(x_train, y_train):</span><br><span class="line">num += (x_i - x_mean) * (y_i - y_mean)</span><br><span class="line">d += (x_i - x_mean) ** <span class="number">2</span></span><br><span class="line">a = num/d</span><br><span class="line">b = y_mean - a*x_mean</span><br><span class="line">y_hat = a*x_train + b <span class="comment"># 回归函数</span></span><br><span class="line">plt.scatter(x_train, y_train)</span><br><span class="line">plt.plot(x_train, y_hat, color=<span class="string">"r"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>y_predict = a*x_test + bmse = mean_squared_error(y_test, y_predict)mae = mean_absolute_error(y_test, y_predict)print(&quot;均方误差为：&quot; + str(mse))print(&quot;平均绝对误差为：&quot; + str(mae))rs = 1 - mse/np.var(y_test)print(&quot;R Square = &quot; + str(rs))</code></pre><p><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/LinearRegression%2FLinear5.png" alt="data"></p><p>这样我们就得到了所有的评价指标。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线性回归&quot;&gt;&lt;a href=&quot;#线性回归&quot; class=&quot;headerlink&quot; title=&quot;线性回归&quot;&gt;&lt;/a&gt;线性回归&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;线性回归(Linear Regression)是利用称为线性回归方程的最小平方函数对一个或多个自变量和因变量之间关系进行建模的一种回归分析。这种函数是一个或多个称为回归系数的模型参数的线性组合。&lt;/p&gt;
&lt;p&gt;回归分析中，只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。&lt;br&gt;        其特点为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;解决回归问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;思想简单，实现容易&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;许多强大的非线性模型的基础&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;结果具有很好的可解释性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;蕴含机器学习中的很多重要思想&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习，线性回归" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%8C%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>机器学习之梯度下降法(GradientDescent)</title>
    <link href="http://yoursite.com/2018/07/29/GradientDescent/"/>
    <id>http://yoursite.com/2018/07/29/GradientDescent/</id>
    <published>2018-07-29T13:32:24.000Z</published>
    <updated>2018-08-02T14:09:04.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>梯度下降法是迭代法的一种,其实它不是一种具体的机器学习算法，是一种基于搜索的最优化方法，可以用于求解最小二乘问题(线性和非线性都可以)。在求解机器学习算法的模型参数，即无约束优化问题时，梯度下降（Gradient Descent）是最常采用的方法之一，另一种常用的方法是最小二乘法。在求解损失函数的最小值时，可以通过梯度下降法来一步步的迭代求解，得到最小化的损失函数和模型参数值。相应的还有一个梯度上升法，它的作用是最大化一个效用函数。</p><a id="more"></a> <p>​        用一个图来表示梯度下降法：<br><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/Gradient%20Descent%2FGradientDescent1.png" alt=""></p><p>怎么理解呢？梯度其实是在在多维空间中的概念，在二维的平面上其实就是导数，梯度表示的就是方向，通过求某一个点的梯度，我们就可以知道J(损失函数)增大的方向，然后乘-η就可以找到J(损失函数)减小的方向，不断地求J的导数，直到其变为0，这样就找到J的最小值点。这里的η称为学习率，η的取值影响获得最优解的速度，η取值太小的时候学习速度收敛太慢，η太大有可能直接跳过最小值点然后导致不收敛。</p><p><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/Gradient%20Descent%2FGradientDescent2.png" alt=""></p><p>有可能在某一次取值的过程中找到的是局部最优解，而不是全局最优解。这个时候怎么解决呢？多次运行，随机化初始点，这样的话增加了找到全局最优解的概率。</p><h2 id="模拟实现梯度下降法"><a href="#模拟实现梯度下降法" class="headerlink" title="模拟实现梯度下降法"></a>模拟实现梯度下降法</h2><p>jupyter notebook中实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#datasets</span></span><br><span class="line">x = np.linspace(<span class="number">-1</span>, <span class="number">6</span> ,<span class="number">141</span>)</span><br><span class="line">y = (x<span class="number">-2.5</span>)**<span class="number">2</span><span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求导数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dJ</span><span class="params">(theta)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>*(theta - <span class="number">2.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">J</span><span class="params">(theta)</span>:</span></span><br><span class="line"><span class="keyword">return</span> (theta - <span class="number">2.5</span>)**<span class="number">2</span><span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 梯度下降法</span></span><br><span class="line">theta = <span class="number">0.0</span></span><br><span class="line">eta = <span class="number">0.1</span></span><br><span class="line"><span class="comment">#误差精度</span></span><br><span class="line">epsilon = <span class="number">1e-8</span></span><br><span class="line">theta_history = [theta]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">gradient = dJ(theta)</span><br><span class="line">last_theta = theta</span><br><span class="line">theta = theta - eta * gradient</span><br><span class="line">theta_history.append(theta)</span><br><span class="line"><span class="keyword">if</span>(abs(J(theta) - J(last_theta)) &lt; epsilon):</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.plot(np.array(theta_history), J(np.array(theta_history)), color=<span class="string">'R'</span>, marker = <span class="string">'o'</span>)</span><br><span class="line">plt.xlabel(<span class="string">"theta"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"J"</span>)</span><br><span class="line">plt.show()</span><br><span class="line">print(<span class="string">"theta = "</span> + str(theta))</span><br><span class="line">print(<span class="string">"J(theta) = "</span> + str(J(theta)))</span><br></pre></td></tr></table></figure><p>得到的结果如下：<br><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/Gradient%20Descent%2FGradientDescent3.png" alt=""></p><p>然后我们上面讨论过，η取值太小的时候学习速度收敛太慢，η太大有可能直接跳过最小值点然后导致不收敛。下面测试一下。先取η=0.01<br><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/Gradient%20Descent%2FGradientDescent4.png" alt=""></p><p>我们可以看出梯度下降的速度变慢了<br>        然后取η=1<br><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/Gradient%20Descent%2FGradientDescent5.png" alt=""></p><p>当η&gt;1的时候编译器就自动报错，但是这里只是针对这里定义的这个函数，并不是意味着η=1就是极限值，针对不同的函数有不同的取值。</p><h2 id="多元线性回归中使用批量梯度下降"><a href="#多元线性回归中使用批量梯度下降" class="headerlink" title="多元线性回归中使用批量梯度下降"></a>多元线性回归中使用批量梯度下降</h2><p>线性回归中使用梯度下降法，其目标是使得<br>$$<br>\sum_{i=1}^{m}(y^i-\hat{y}^i)^2<br>$$<br>尽可能小，而且线性回归算法的损失函数是具有唯一解的。<br>        其中<br>$$<br>\hat{y}^{i} = \theta _{0} + \theta _{1}X_{1}^{i}+…++ \theta _{n}X_{n}^{i}<br>$$<br>带入因此线性回归中梯度下降的目标就成为了<br>$$<br>\sum_{i=1}^{m}(y^i - \theta _{0} + \theta _{1}X_{1}^{i}+…++ \theta _{n}X_{n}^{i})<br>$$<br>使得其尽可能小。<br>那梯度怎么去求呢？如下：<br><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/Gradient%20Descent%2FGradientDescent6.png" alt=""></p><h3 id="批量梯度下降法具体实现"><a href="#批量梯度下降法具体实现" class="headerlink" title="批量梯度下降法具体实现"></a>批量梯度下降法具体实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">np.random.seed(666)</span><br><span class="line">x = 2 * np.random.random(size = 100)</span><br><span class="line">y = x * 3.0 + 4.0 + np.random.normal(size = 100)</span><br><span class="line">X = x.reshape(-1, 1)</span><br><span class="line"></span><br><span class="line">#损失函数</span><br><span class="line">def J(theta, X_b, y):</span><br><span class="line">try:</span><br><span class="line">return np.sum((y - X_b.dot(theta))**2)/len(X_b)</span><br><span class="line">except:</span><br><span class="line">return float(&apos;inf&apos;)</span><br><span class="line"></span><br><span class="line">#损失函数的梯度</span><br><span class="line">def dJ(theta, X_b, y):</span><br><span class="line">res = np.empty(len(theta))</span><br><span class="line">res[0] = np.sum(X_b.dot(theta) - y)</span><br><span class="line">for i in range(1, len(theta)):</span><br><span class="line">res[i] = (X_b.dot(theta) - y).dot(X_b[:,i])</span><br><span class="line">return res *2 /len(X_b)</span><br><span class="line"></span><br><span class="line">#梯度下降法</span><br><span class="line">def gradient_descent(X_b, y, initial_thata, eta, n_iters = 1e4, epsilon = 1e-8):</span><br><span class="line">theta = initial_theta</span><br><span class="line">i_iter = 0</span><br><span class="line"></span><br><span class="line">while i_iter &lt; n_iters:# n_iters是最大循环次数</span><br><span class="line">gradient = dJ(theta, X_b, y)</span><br><span class="line">last_theta = theta</span><br><span class="line">theta = theta - eta * gradient</span><br><span class="line"></span><br><span class="line">if(abs(J(theta, X_b, y) - J(last_theta, X_b, y)) &lt; epsilon):</span><br><span class="line">break</span><br><span class="line"></span><br><span class="line">i_iter += 1</span><br><span class="line"></span><br><span class="line">return theta</span><br><span class="line"></span><br><span class="line">X_b = np.hstack([np.ones((len(x), 1)), x.reshape(-1, 1)])</span><br><span class="line">initial_theta = np.zeros(X_b.shape[1])</span><br><span class="line">eta = 0.01</span><br><span class="line"></span><br><span class="line">theta = gradient_descent(X_b, y, initial_theta, eta)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(x, y)</span><br><span class="line">Y = X_b.dot(theta)</span><br><span class="line">plt.plot(x, Y, color=<span class="string">"red"</span>)</span><br><span class="line">plt.show()</span><br><span class="line">print(<span class="string">"theta = "</span> + str(theta))</span><br></pre></td></tr></table></figure><p>得到的结果</p><p><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/Gradient%20Descent%2FGradientDescent7.png" alt=""></p><p>在初始化数据的时候，斜率设为3，截距为4，然后我们训练出的结果theta与两值接近，证明训练的模型是准确的：<br>y = x * 3.0 + 4.0 + np.random.normal(size = 100)</p><h2 id="随机梯度下降法"><a href="#随机梯度下降法" class="headerlink" title="随机梯度下降法"></a>随机梯度下降法</h2><p>上面我们用的是批量梯度下降法，这种方法有一个缺点，就是每一项都需要对所有的样本点进行计算，数据量少的时候还可以，但是数据量很大的时候就显得很鸡肋了，计算非常的耗资源。能不能每一次计算的时候只对其中的一个样本进行计算呢？这就衍生出了随机梯度下降法。</p><p><img src="https://pythonimage-1257203698.cos.ap-shanghai.myqcloud.com/Gradient%20Descent%2FGradientDescent8.png" alt=""></p><p>即每读取一条样本，就迭代对Θ进行更新，然后判断其是否收敛，若没收敛，则继续读取样本进行处理，如果所有样本都读取完毕了，则循环重新从头开始读取样本进行处理。但是，相较于批量梯度下降算法而言，随机梯度下降算法使得J(Θ)趋近于最小值的速度更快，但是有可能造成永远不可能收敛于最小值，有可能一直会在最小值周围震荡，但是实践中，大部分值都能够接近于最小值，所以当数据量很大的时候可以用精度来换取时间。</p><p>在随机梯度下降法中为了得到更高的收敛结果，学习率是要随着循环次数的增加而逐渐的减小。这是因为在学习的过程中要是学习率是一个固定值，但是可能由于随机的过程不够好，eta有是一个固定值，那么在学习的过程中随机梯度下降法接近最优解的时候又会慢慢的跳出最优解的范围。气质学习率随着循环次数的增加而逐渐的减小这种思想是模拟退火的思想，去搜了下模拟退火，下面写下自己的理解。</p><h3 id="模拟退火算法"><a href="#模拟退火算法" class="headerlink" title="模拟退火算法"></a>模拟退火算法</h3><p>拟退火其实也是一种贪心算法，但是它的搜索过程引入了随机因素。模拟退火算法以一定的概率来接受一个比当前解要差的解，因此有可能会跳出这个局部的最优解，达到全局的最优解。<br>模拟退火算法描述：</p><p>想象一个高温物体的降温过程。其温度为T时出现能量差为dE的降温概率为<br>P(dE) =  e ^ ( -dE / (k * T) ) 。<br>其实就是温度越高降温的概率越大，温度越低降温概率越小。而模拟退火就是利用这样一种思想去进行搜索。<br>那么在进行搜索的时候首先定义一个初始值( 温度 ) T , 一个系数 r ( 降温速度  0 \&lt; r \&lt; 1 ) , 假设你当前状态为 f i , 你的下一个状态为 f i +1 , 对这两个状态进行评价，如果更接近你想要的结果，就更新到这个状态，否则则以 P ( dE ) 的概率去更新到 这个状态，但是其实在实际题目中，这个概率是不必要的，这一步有时是可以忽略掉的。我们可以想象，随着搜索次数的不断增多，搜索范围将越来越趋近于稳定，也就是随着时间的增长温度降低的概率越来越低，直到趋近于1。对应搜索就是随着你搜索的次数越多，你搜索到的值是你想要的值的概率就越大。</p><p>然后结合模拟退火的思想，在随机梯度下降法中设置学习率为:</p><p>然后结合模拟退火的思想，在随机梯度下降法中设置学习率为:<br>$$<br>\eta = \frac{a}{i_iters + b}<br>$$<br>其中i_iters是循环次数，a,b是两个经验参数，根据实际情况设置。</p><p>看完了梯度下降法，其优缺点如下：</p><p>第一种，遍历全部数据集算一次损失函数，然后算函数对各个参数的梯度，更新梯度。这种方法每更新一次参数都要把数据集里的所有样本都看一遍，计算量开销大，计算速度慢，不支持在线学习，其实这就是批量梯度下降。</p><p>其中i_iters是循环次数，a,b是两个经验参数，根据实际情况设置。</p><p>看完了梯度下降法，其优缺点如下：</p><p>第一种，遍历全部数据集算一次损失函数，然后算函数对各个参数的梯度，更新梯度。这种方法每更新一次参数都要把数据集里的所有样本都看一遍，计算量开销大，计算速度慢，不支持在线学习，其实这就是批量梯度下降。</p><p>其中i_iters是循环次数，a,b是两个经验参数，根据实际情况设置。<br>看完了梯度下降法，其优缺点如下：<br>第一种，遍历全部数据集算一次损失函数，然后算函数对各个参数的梯度，更新梯度。这种方法每更新一次参数都要把数据集里的所有样本都看一遍，计算量开销大，计算速度慢，不支持在线学习，其实这就是批量梯度下降。</p><p>另一种，每看一个数据就算一下损失函数，然后求梯度更新参数，这个其实也就是随机梯度下降，这个方法速度比较快，但是收敛性能不太好，可能在最优点附近晃来晃去，找不到不到最优点。两次参数的更新也有可能互相抵消掉，造成目标函数震荡的比较剧烈。</p><p>为了克服两种方法的缺点，现在一般采用的是一种折中手段，小批的梯度下降，这种方法把数据分为若干个批，按批来更新参数，这样，一个批中的一组数据共同决定了本次梯度的方向，下降起来就不容易跑偏，减少了随机性。另一方面因为批的样本数与整个数据集相比小了很多，计算量也不是很大。</p><p>另一种，每看一个数据就算一下损失函数，然后求梯度更新参数，这个其实也就是随机梯度下降，这个方法速度比较快，但是收敛性能不太好，可能在最优点附近晃来晃去，找不到不到最优点。两次参数的更新也有可能互相抵消掉，造成目标函数震荡的比较剧烈。为了克服两种方法的缺点，现在一般采用的是一种折中手段，小批的梯度下降，这种方法把数据分为若干个批，按批来更新参数，这样，一个批中的一组数据共同决定了本次梯度的方向，下降起来就不容易跑偏，减少了随机性。另一方面因为批的样本数与整个数据集相比小了很多，计算量也不是很大。</p><p>为了克服两种方法的缺点，现在一般采用的是一种折中手段，小批的梯度下降，这种方法把数据分为若干个批，按批来更新参数，这样，一个批中的一组数据共同决定了本次梯度的方向，下降起来就不容易跑偏，减少了随机性。另一方面因为批的样本数与整个数据集相比小了很多，计算量也不是很大。</p><h3 id="随机梯度下降法实现"><a href="#随机梯度下降法实现" class="headerlink" title="随机梯度下降法实现"></a>随机梯度下降法实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">m = 100000</span><br><span class="line">x = np.random.normal(size = m)</span><br><span class="line">X = x.reshape(-1, 1)</span><br><span class="line">y = 4.0 * x + 3.0 + np.random.normal(0 ,3, size = m)</span><br><span class="line"></span><br><span class="line">def J(theta, X_b, y):</span><br><span class="line">try:</span><br><span class="line">return np.sum((y - X_b.dot(theta))**2) / len(y)</span><br><span class="line">except:</span><br><span class="line">return float(&apos;inf&apos;)</span><br><span class="line"></span><br><span class="line">def dJ_sgd(theta, X_b_i, y_i):</span><br><span class="line">return X_b_i.T.dot(X_b_i.dot(theta) - y_i) * 2.0 </span><br><span class="line"></span><br><span class="line">def sgd(X_b, y, initial_theta, n_iters):</span><br><span class="line">t0 = 5</span><br><span class="line">t1 = 50</span><br><span class="line"></span><br><span class="line">def learning_rate(t):</span><br><span class="line">return t0 / (t + t1)</span><br><span class="line"></span><br><span class="line">theta = initial_theta</span><br><span class="line">for cur_iter in range(n_iters):</span><br><span class="line">rand_i = np.random.randint(len(X_b))</span><br><span class="line">gradient = dJ_sgd(theta, X_b[rand_i], y[rand_i])</span><br><span class="line">theta = theta - learning_rate(cur_iter) * gradient</span><br><span class="line"></span><br><span class="line">return theta</span><br><span class="line">X_b = np.hstack([np.ones((len(X), 1)), X])</span><br><span class="line">initial_theta = np.zeros(X_b.shape[1])</span><br><span class="line">theta = sgd(X_b, y, initial_theta, n_iters = len(X_b)//3)</span><br><span class="line">print(&quot;theta = &quot; + str(theta))</span><br></pre></td></tr></table></figure><p>输出的theta = [3.00887864 4.05589554]，与设置的数据相接近。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;梯度下降法&quot;&gt;&lt;a href=&quot;#梯度下降法&quot; class=&quot;headerlink&quot; title=&quot;梯度下降法&quot;&gt;&lt;/a&gt;梯度下降法&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;梯度下降法是迭代法的一种,其实它不是一种具体的机器学习算法，是一种基于搜索的最优化方法，可以用于求解最小二乘问题(线性和非线性都可以)。在求解机器学习算法的模型参数，即无约束优化问题时，梯度下降（Gradient Descent）是最常采用的方法之一，另一种常用的方法是最小二乘法。在求解损失函数的最小值时，可以通过梯度下降法来一步步的迭代求解，得到最小化的损失函数和模型参数值。相应的还有一个梯度上升法，它的作用是最大化一个效用函数。&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习，梯度下降，python3，jupyter notebook" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%8C%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%EF%BC%8Cpython3%EF%BC%8Cjupyter-notebook/"/>
    
  </entry>
  
  <entry>
    <title>哈哈哈，终于把博客搭建起来啦</title>
    <link href="http://yoursite.com/2018/06/21/first-blog/"/>
    <id>http://yoursite.com/2018/06/21/first-blog/</id>
    <published>2018-06-21T13:00:00.000Z</published>
    <updated>2018-08-02T14:08:49.777Z</updated>
    
    <content type="html"><![CDATA[<p>用来几个小时的时间，算是完成了简单的搭建，果然在学习的过程中才是最开心的。为什么要跑到这里搭建博客呢？嗯。。。。<br>       毕竟是要常年混迹在全球最大的同性交友社区了，把博客搭起来写写项目开发经历，记录下自己开踩过的坑，还是很重要的。<br>       希望路能越走越顺吧。啦啦啦……..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用来几个小时的时间，算是完成了简单的搭建，果然在学习的过程中才是最开心的。为什么要跑到这里搭建博客呢？嗯。。。。&lt;br&gt;       毕竟是要常年混迹在全球最大的同性交友社区了，把博客搭起来写写项目开发经历，记录下自己开踩过的坑，还是很重要的。&lt;br&gt;       希望路能
      
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
